0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'karma' ]
2 info using npm@1.2.14
3 info using node@v0.8.22
4 verbose read json /usr/local/lib/package.json
5 verbose read json /usr/local/lib/package.json
6 verbose cache add [ 'karma', null ]
7 verbose cache add name=undefined spec="karma" args=["karma",null]
8 verbose parsed url { pathname: 'karma', path: 'karma', href: 'karma' }
9 silly lockFile 512423cb-karma karma
10 verbose lock karma /Users/ckgagan/.npm/512423cb-karma.lock
11 silly lockFile 512423cb-karma karma
12 silly lockFile 512423cb-karma karma
13 verbose addNamed [ 'karma', '' ]
14 verbose addNamed [ null, '' ]
15 silly lockFile cd7961bb-karma karma@
16 verbose lock karma@ /Users/ckgagan/.npm/cd7961bb-karma.lock
17 silly addNameRange { name: 'karma', range: '', hasData: false }
18 verbose url raw karma
19 verbose url resolving [ 'https://registry.npmjs.org/', './karma' ]
20 verbose url resolved https://registry.npmjs.org/karma
21 info trying registry request attempt 1 at 07:13:05
22 http GET https://registry.npmjs.org/karma
23 http 200 https://registry.npmjs.org/karma
24 silly registry.get cb [ 200,
24 silly registry.get   { vary: 'Accept',
24 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
24 silly registry.get     etag: '"5UFO7UXOXU8MMWK2S7WB5C3AK"',
24 silly registry.get     date: 'Sat, 07 Sep 2013 01:28:10 GMT',
24 silly registry.get     'content-type': 'application/json',
24 silly registry.get     'content-length': '261818' } ]
25 silly addNameRange number 2 { name: 'karma', range: '', hasData: true }
26 silly addNameRange versions [ 'karma',
26 silly addNameRange   [ '0.8.0',
26 silly addNameRange     '0.9.0-dart',
26 silly addNameRange     '0.8.1',
26 silly addNameRange     '0.8.2',
26 silly addNameRange     '0.8.3',
26 silly addNameRange     '0.9.0',
26 silly addNameRange     '0.8.4',
26 silly addNameRange     '0.9.1',
26 silly addNameRange     '0.8.5',
26 silly addNameRange     '0.9.2',
26 silly addNameRange     '0.9.2-dart',
26 silly addNameRange     '0.9.3',
26 silly addNameRange     '0.8.6',
26 silly addNameRange     '0.9.4',
26 silly addNameRange     '0.8.7',
26 silly addNameRange     '0.9.5',
26 silly addNameRange     '0.9.6',
26 silly addNameRange     '0.8.8',
26 silly addNameRange     '0.9.7',
26 silly addNameRange     '0.9.8',
26 silly addNameRange     '0.10.0',
26 silly addNameRange     '0.10.1',
26 silly addNameRange     '0.10.2',
26 silly addNameRange     '0.11.0' ] ]
27 verbose addNamed [ 'karma', '0.10.2' ]
28 verbose addNamed [ '0.10.2', '0.10.2' ]
29 silly lockFile 81afe04f-karma-0-10-2 karma@0.10.2
30 verbose lock karma@0.10.2 /Users/ckgagan/.npm/81afe04f-karma-0-10-2.lock
31 silly lockFile ae089dde-npmjs-org-karma-karma-0-10-2-tgz https://registry.npmjs.org/karma/-/karma-0.10.2.tgz
32 verbose lock https://registry.npmjs.org/karma/-/karma-0.10.2.tgz /Users/ckgagan/.npm/ae089dde-npmjs-org-karma-karma-0-10-2-tgz.lock
33 verbose addRemoteTarball [ 'https://registry.npmjs.org/karma/-/karma-0.10.2.tgz',
33 verbose addRemoteTarball   '4e100bd346bb24a1260dcd34b5b3d2d4a9b27b17' ]
34 info retry fetch attempt 1 at 07:13:22
35 verbose fetch to= /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
36 http GET https://registry.npmjs.org/karma/-/karma-0.10.2.tgz
37 http 200 https://registry.npmjs.org/karma/-/karma-0.10.2.tgz
38 silly shasum updated bytes 40960
39 silly shasum updated bytes 40960
40 silly shasum updated bytes 40960
41 silly shasum updated bytes 40960
42 silly shasum updated bytes 40960
43 silly shasum updated bytes 40960
44 silly shasum updated bytes 40960
45 silly shasum updated bytes 40960
46 silly shasum updated bytes 40960
47 silly shasum updated bytes 40960
48 silly shasum updated bytes 40960
49 silly shasum updated bytes 40960
50 silly shasum updated bytes 40960
51 silly shasum updated bytes 40960
52 silly shasum updated bytes 40960
53 silly shasum updated bytes 40960
54 silly shasum updated bytes 40960
55 silly shasum updated bytes 24406
56 info shasum 4e100bd346bb24a1260dcd34b5b3d2d4a9b27b17
56 info shasum /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
57 verbose tar unpack /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
58 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
59 verbose lock /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package /Users/ckgagan/.npm/5b2cd182-02622-0-5372518382500857-package.lock
60 silly lockFile ee9a96cd-02622-0-5372518382500857-tmp-tgz /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
61 verbose lock /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz /Users/ckgagan/.npm/ee9a96cd-02622-0-5372518382500857-tmp-tgz.lock
62 silly gunzTarPerm modes [ '755', '644' ]
63 silly gunzTarPerm extractEntry package.json
64 silly gunzTarPerm extractEntry README.md
65 silly gunzTarPerm extractEntry LICENSE
66 silly gunzTarPerm extractEntry config.tpl.js
67 silly gunzTarPerm extractEntry karma-completion.sh
68 silly gunzTarPerm extractEntry CHANGELOG.md
69 silly gunzTarPerm extractEntry bin/karma
70 silly gunzTarPerm extractEntry lib/browser.js
71 silly gunzTarPerm extractEntry lib/executor.js
72 silly gunzTarPerm extractEntry lib/file-list.js
73 silly gunzTarPerm extractEntry lib/helper.js
74 silly gunzTarPerm extractEntry lib/events.js
75 silly gunzTarPerm extractEntry lib/init.js
76 silly gunzTarPerm extractEntry lib/launcher.js
77 silly gunzTarPerm extractEntry lib/cli.js
78 silly gunzTarPerm extractEntry lib/logger.js
79 silly gunzTarPerm extractEntry lib/server.js
80 silly gunzTarPerm extractEntry lib/constants.js
81 silly gunzTarPerm extractEntry lib/plugin.js
82 silly gunzTarPerm extractEntry lib/config.js
83 silly gunzTarPerm extractEntry lib/preprocessor.js
84 silly gunzTarPerm extractEntry lib/completion.js
85 silly gunzTarPerm extractEntry lib/reporter.js
86 silly gunzTarPerm extractEntry lib/watcher.js
87 silly gunzTarPerm extractEntry lib/runner.js
88 silly gunzTarPerm extractEntry lib/index.js
89 silly gunzTarPerm extractEntry lib/web-server.js
90 silly gunzTarPerm extractEntry lib/reporters/Base.js
91 silly gunzTarPerm extractEntry lib/reporters/BaseColor.js
92 silly gunzTarPerm extractEntry lib/reporters/Dots.js
93 silly gunzTarPerm extractEntry lib/reporters/DotsColor.js
94 silly gunzTarPerm extractEntry lib/reporters/Multi.js
95 silly gunzTarPerm extractEntry lib/reporters/Progress.js
96 silly gunzTarPerm extractEntry lib/reporters/ProgressColor.js
97 silly gunzTarPerm extractEntry lib/runner.js.orig
98 silly gunzTarPerm extractEntry lib/middleware/common.js
99 silly gunzTarPerm extractEntry lib/middleware/karma.js
100 silly gunzTarPerm extractEntry lib/middleware/proxy.js
101 silly gunzTarPerm extractEntry lib/middleware/runner.js
102 silly gunzTarPerm extractEntry lib/middleware/source-files.js
103 silly gunzTarPerm extractEntry lib/server.js.orig
104 silly gunzTarPerm extractEntry lib/cli.js.orig
105 silly gunzTarPerm extractEntry lib/launchers/Base.js
106 silly gunzTarPerm extractEntry config.tpl.coffee
107 silly gunzTarPerm extractEntry static/karma.js
108 silly gunzTarPerm extractEntry static/client.html
109 silly gunzTarPerm extractEntry static/context.html
110 silly gunzTarPerm extractEntry static/debug.html
111 silly gunzTarPerm extractEntry test-results.xml
112 silly gunzTarPerm extractEntry thesis.pdf
113 verbose read json /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package/package.json
114 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
115 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
116 silly lockFile ee9a96cd-02622-0-5372518382500857-tmp-tgz /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
117 silly lockFile ee9a96cd-02622-0-5372518382500857-tmp-tgz /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/tmp.tgz
118 verbose from cache /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package/package.json
119 verbose tar pack [ '/Users/ckgagan/.npm/karma/0.10.2/package.tgz',
119 verbose tar pack   '/Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package' ]
120 verbose tarball /Users/ckgagan/.npm/karma/0.10.2/package.tgz
121 verbose folder /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
122 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
123 verbose lock /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package /Users/ckgagan/.npm/5b2cd182-02622-0-5372518382500857-package.lock
124 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
125 verbose lock /Users/ckgagan/.npm/karma/0.10.2/package.tgz /Users/ckgagan/.npm/1078c2c2-gan-npm-karma-0-10-2-package-tgz.lock
126 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
127 silly lockFile 5b2cd182-02622-0-5372518382500857-package /Users/ckgagan/tmp/npm-36436/1378517302622-0.5372518382500857/package
128 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
129 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
130 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
131 verbose lock /Users/ckgagan/.npm/karma/0.10.2/package /Users/ckgagan/.npm/011da422-ckgagan-npm-karma-0-10-2-package.lock
132 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
133 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
134 verbose tar unpack /Users/ckgagan/.npm/karma/0.10.2/package.tgz
135 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
136 verbose lock /Users/ckgagan/.npm/karma/0.10.2/package /Users/ckgagan/.npm/011da422-ckgagan-npm-karma-0-10-2-package.lock
137 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
138 verbose lock /Users/ckgagan/.npm/karma/0.10.2/package.tgz /Users/ckgagan/.npm/1078c2c2-gan-npm-karma-0-10-2-package-tgz.lock
139 silly gunzTarPerm modes [ '755', '644' ]
140 silly gunzTarPerm extractEntry package.json
141 silly gunzTarPerm extractEntry README.md
142 silly gunzTarPerm extractEntry LICENSE
143 silly gunzTarPerm extractEntry config.tpl.js
144 silly gunzTarPerm extractEntry karma-completion.sh
145 silly gunzTarPerm extractEntry lib/browser.js
146 silly gunzTarPerm extractEntry lib/executor.js
147 silly gunzTarPerm extractEntry lib/file-list.js
148 silly gunzTarPerm extractEntry lib/helper.js
149 silly gunzTarPerm extractEntry lib/events.js
150 silly gunzTarPerm extractEntry lib/init.js
151 silly gunzTarPerm extractEntry lib/launcher.js
152 silly gunzTarPerm extractEntry lib/cli.js
153 silly gunzTarPerm extractEntry lib/logger.js
154 silly gunzTarPerm extractEntry lib/server.js
155 silly gunzTarPerm extractEntry lib/constants.js
156 silly gunzTarPerm extractEntry lib/plugin.js
157 silly gunzTarPerm extractEntry lib/config.js
158 silly gunzTarPerm extractEntry lib/preprocessor.js
159 silly gunzTarPerm extractEntry lib/completion.js
160 silly gunzTarPerm extractEntry lib/reporter.js
161 silly gunzTarPerm extractEntry lib/watcher.js
162 silly gunzTarPerm extractEntry lib/runner.js
163 silly gunzTarPerm extractEntry lib/index.js
164 silly gunzTarPerm extractEntry lib/web-server.js
165 silly gunzTarPerm extractEntry lib/reporters/Base.js
166 silly gunzTarPerm extractEntry lib/reporters/BaseColor.js
167 silly gunzTarPerm extractEntry lib/reporters/Dots.js
168 silly gunzTarPerm extractEntry lib/reporters/DotsColor.js
169 silly gunzTarPerm extractEntry lib/reporters/Multi.js
170 silly gunzTarPerm extractEntry lib/reporters/Progress.js
171 silly gunzTarPerm extractEntry lib/reporters/ProgressColor.js
172 silly gunzTarPerm extractEntry lib/runner.js.orig
173 silly gunzTarPerm extractEntry lib/middleware/common.js
174 silly gunzTarPerm extractEntry lib/middleware/karma.js
175 silly gunzTarPerm extractEntry lib/middleware/proxy.js
176 silly gunzTarPerm extractEntry lib/middleware/runner.js
177 silly gunzTarPerm extractEntry lib/middleware/source-files.js
178 silly gunzTarPerm extractEntry lib/server.js.orig
179 silly gunzTarPerm extractEntry lib/cli.js.orig
180 silly gunzTarPerm extractEntry lib/launchers/Base.js
181 silly gunzTarPerm extractEntry CHANGELOG.md
182 silly gunzTarPerm extractEntry config.tpl.coffee
183 silly gunzTarPerm extractEntry bin/karma
184 silly gunzTarPerm extractEntry static/karma.js
185 silly gunzTarPerm extractEntry static/client.html
186 silly gunzTarPerm extractEntry static/context.html
187 silly gunzTarPerm extractEntry static/debug.html
188 silly gunzTarPerm extractEntry test-results.xml
189 silly gunzTarPerm extractEntry thesis.pdf
190 verbose read json /Users/ckgagan/.npm/karma/0.10.2/package/package.json
191 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
192 silly lockFile 011da422-ckgagan-npm-karma-0-10-2-package /Users/ckgagan/.npm/karma/0.10.2/package
193 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
194 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
195 silly shasum updated bytes 40960
196 silly shasum updated bytes 40960
197 silly shasum updated bytes 40960
198 silly shasum updated bytes 40960
199 silly shasum updated bytes 40960
200 silly shasum updated bytes 40960
201 silly shasum updated bytes 40960
202 silly shasum updated bytes 40960
203 silly shasum updated bytes 40960
204 silly shasum updated bytes 40960
205 silly shasum updated bytes 40960
206 silly shasum updated bytes 40960
207 silly shasum updated bytes 40960
208 silly shasum updated bytes 40960
209 silly shasum updated bytes 40960
210 silly shasum updated bytes 40960
211 silly shasum updated bytes 40960
212 silly shasum updated bytes 24621
213 info shasum c16c8bbd24fe6d1c186f9c4f208454de5a739287
213 info shasum /Users/ckgagan/.npm/karma/0.10.2/package.tgz
214 verbose from cache /Users/ckgagan/.npm/karma/0.10.2/package/package.json
215 verbose chmod /Users/ckgagan/.npm/karma/0.10.2/package.tgz 644
216 verbose chown /Users/ckgagan/.npm/karma/0.10.2/package.tgz [ 0, 20 ]
217 silly lockFile ae089dde-npmjs-org-karma-karma-0-10-2-tgz https://registry.npmjs.org/karma/-/karma-0.10.2.tgz
218 silly lockFile ae089dde-npmjs-org-karma-karma-0-10-2-tgz https://registry.npmjs.org/karma/-/karma-0.10.2.tgz
219 silly lockFile 81afe04f-karma-0-10-2 karma@0.10.2
220 silly lockFile 81afe04f-karma-0-10-2 karma@0.10.2
221 silly lockFile cd7961bb-karma karma@
222 silly lockFile cd7961bb-karma karma@
223 silly resolved [ { name: 'karma',
223 silly resolved     description: 'Spectacular Test Runner for JavaScript.',
223 silly resolved     homepage: 'http://karma-runner.github.io/',
223 silly resolved     repository: { type: 'git', url: 'git://github.com/karma-runner/karma.git' },
223 silly resolved     bugs: { url: 'https://github.com/karma-runner/karma/issues' },
223 silly resolved     keywords:
223 silly resolved      [ 'karma',
223 silly resolved        'spectacular',
223 silly resolved        'runner',
223 silly resolved        'karma',
223 silly resolved        'js',
223 silly resolved        'javascript',
223 silly resolved        'testing',
223 silly resolved        'test',
223 silly resolved        'remote',
223 silly resolved        'execution' ],
223 silly resolved     author: { name: 'Vojta Jína', email: 'vojta.jina@gmail.com' },
223 silly resolved     contributors:
223 silly resolved      [ [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object],
223 silly resolved        [Object] ],
223 silly resolved     dependencies:
223 silly resolved      { di: '~0.0.1',
223 silly resolved        'socket.io': '~0.9.13',
223 silly resolved        chokidar: '~0.6',
223 silly resolved        glob: '~3.1.21',
223 silly resolved        minimatch: '~0.2',
223 silly resolved        'http-proxy': '~0.10',
223 silly resolved        optimist: '~0.3',
223 silly resolved        'coffee-script': '~1.6',
223 silly resolved        rimraf: '~2.1',
223 silly resolved        q: '~0.9',
223 silly resolved        colors: '0.6.0-1',
223 silly resolved        lodash: '~1.1',
223 silly resolved        mime: '~1.2',
223 silly resolved        log4js: '~0.6.3',
223 silly resolved        useragent: '~2.0.4',
223 silly resolved        'graceful-fs': '~1.2.1',
223 silly resolved        connect: '~2.8.4' },
223 silly resolved     peerDependencies:
223 silly resolved      { 'karma-jasmine': '*',
223 silly resolved        'karma-requirejs': '*',
223 silly resolved        'karma-coffee-preprocessor': '*',
223 silly resolved        'karma-html2js-preprocessor': '*',
223 silly resolved        'karma-chrome-launcher': '*',
223 silly resolved        'karma-firefox-launcher': '*',
223 silly resolved        'karma-phantomjs-launcher': '*',
223 silly resolved        'karma-script-launcher': '*' },
223 silly resolved     devDependencies:
223 silly resolved      { grunt: '~0.4',
223 silly resolved        'grunt-simple-mocha': 'git://github.com/yaymukund/grunt-simple-mocha.git',
223 silly resolved        'grunt-contrib-jshint': '~0.3',
223 silly resolved        'grunt-coffeelint': '~0.0.6',
223 silly resolved        'grunt-npm': '~0.0.1',
223 silly resolved        'grunt-bump': '~0.0.10',
223 silly resolved        'grunt-conventional-changelog': '~1.0.0',
223 silly resolved        'grunt-auto-release': '~0.0.3',
223 silly resolved        mocks: '~0.0.10',
223 silly resolved        which: '~1.0',
223 silly resolved        'sinon-chai': '~2.3',
223 silly resolved        chai: '~1.5',
223 silly resolved        mocha: '~1.8',
223 silly resolved        sinon: '~1.6',
223 silly resolved        'timer-shim': '~0.2',
223 silly resolved        'chai-as-promised': '~3.2',
223 silly resolved        qq: '~0.3',
223 silly resolved        'karma-jasmine': '*',
223 silly resolved        'karma-mocha': '*',
223 silly resolved        'karma-qunit': '*',
223 silly resolved        'karma-coverage': '*',
223 silly resolved        'karma-requirejs': '*',
223 silly resolved        'karma-growl-reporter': '*',
223 silly resolved        'karma-junit-reporter': '*',
223 silly resolved        'karma-chrome-launcher': '*',
223 silly resolved        'karma-firefox-launcher': '*',
223 silly resolved        'karma-sauce-launcher': '*',
223 silly resolved        'karma-phantomjs-launcher': '*',
223 silly resolved        'karma-ng-scenario': '*',
223 silly resolved        'karma-coffee-preprocessor': '*',
223 silly resolved        'karma-html2js-preprocessor': '*',
223 silly resolved        'karma-browserstack-launcher': 'git://github.com/karma-runner/karma-browserstack-launcher.git',
223 silly resolved        semver: '~1.1.4',
223 silly resolved        'grunt-contrib-watch': '~0.5.0' },
223 silly resolved     main: './lib/index',
223 silly resolved     bin: { karma: './bin/karma' },
223 silly resolved     engines: { node: '~0.8 || ~0.10' },
223 silly resolved     version: '0.10.2',
223 silly resolved     readme: '# Karma [![Build Status](https://secure.travis-ci.org/karma-runner/karma.png?branch=master)](http://travis-ci.org/karma-runner/karma)\n\nA simple tool that allows you to execute JavaScript code in multiple\n_real_ browsers, powered by [Node.js] and [Socket.io].\n\n> The main purpose of Karma is to make your TDD development easy,\n>  fast, and fun.\n\n## When should I use Karma?\n\n* You want to test code in *real* browsers.\n* You want to test code in multiple browsers (desktop, mobile,\n  tablets, etc.).\n* You want to execute your tests locally during development.\n* You want to execute your tests on a continuous integration server.\n* You want to execute your tests on every save.\n* You love your terminal.\n* You don\'t want your (testing) life to suck.\n* You want to use [Istanbul] to automagically generate coverage\n  reports.\n* You want to use [RequireJS] for your source files.\n\n\n## But I still want to use \\_insert testing library\\_\n\nKarma is not a testing framework, neither an assertion library,\nso for that you can use pretty much anything you like. Right now out\nof the box there is support for\n\n* [Mocha]\n* [Jasmine]\n* [QUnit]\n* \\_anything else\\_ Write your own adapter. It\'s not that hard. And we\n  are here to help.\n\n\n## Which Browsers can I use?\n\nAll the major browsers are supported, if you want to know more see the\n[Browsers] page.\n\n\n## I want to use it. Where do I sign?\n\nYou don\'t need to sign anything but here are some resources to help\nyou to get started. And if you need even more infos have a look at our\ngreat [website].\n\n### Obligatory Screencast.\n\nEvery serious project has a screencast, so here is ours.  Just click\n[here] and let the show begin.\n\n### NPM Installation.\n\nIf you have [Node.js] installed, it\'s as simple as\n\n```bash\n$ npm install -g karma\n```\n\nThis will give you the latest stable version available on npm. If you\nwant to live life on the edge you can do so by\n\n```bash\n$ npm install -g karma@canary\n```\n\nThe curious can have a look at the documentation articles for\n[Getting Started] and [Versioning].\n\n### Using it.\n\nGo into your project and create a Karma configuration. That is\njust a simple JavaScript or CoffeeScript file that tells Karma\nwhere all the awesomeness of your project are.\n\nYou can find a simple example in\n[test/client/karma.conf.js](https://github.com/karma-runner/karma/blob/master/test/client/karma.conf.js)\nwhich contains most of the options.\n\nTo create your own from scratch there is the `init` command, which\nwill be named `karma.conf.js` by default:\n\n```bash\n$ karma init\n```\nThis will ask you many questions and if you answered them all correct\nyou will be allowed to use Karma.\n\nFor more information on the configuration options see\n[Configuration File Overview].\n\nNow that you have your configuration all that is left to do is to\nstart Karma:\n```bash\n$ karma start\n```\n\nIf you want to run tests manually (without auto watching file changes), you can:\n```bash\n$ karma run\n```\nBut only if you have started the Karma server before.\n\n\n## Why did you create this?\n\nThroughout the development of [AngularJS], we\'ve been using [JSTD] for\ntesting. I really think that JSTD is a great idea. Unfortunately, we\nhad many problems with JSTD, so we decided to write our own test\nrunner based on the same idea. We wanted a simple tool just for\nexecuting JavaScript tests that is both stable and fast. That\'s why we\nuse the awesome [Socket.io] library and [Node.js].\n\n\n## I still don\'t get it. Where can I get help?\n\n* [Docs]\n* [Mailing List]\n* [Issuetracker]\n* [@JsKarma] on Twitter\n\n## This is so great. I want to help.\n\nSee\n[Contributing.md](https://github.com/karma-runner/karma/blob/master/CONTRIBUTING.md)\nor the [docs] for more information.\n\n\n## My boss wants a license. So where is it?\n\n### The MIT License\n\n> Copyright (C) 2011-2013 Vojta Jína.\n>\n> Permission is hereby granted, free of charge, to any person\n> obtaining a copy of this software and associated documentation files\n> (the "Software"), to deal in the Software without restriction,\n> including without limitation the rights to use, copy, modify, merge,\n> publish, distribute, sublicense, and/or sell copies of the Software,\n> and to permit persons to whom the Software is furnished to do so,\n> subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n> NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n> BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n> ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\n\n\n[AngularJS]: http://angularjs.org/\n[JSTD]: http://code.google.com/p/js-test-driver/\n[Socket.io]: http://socket.io/\n[Node.js]: http://nodejs.org/\n[Jasmine]: http://pivotal.github.io/jasmine/\n[Mocha]: http://visionmedia.github.io/mocha/\n[QUnit]: http://qunitjs.com/\n[here]: http://www.youtube.com/watch?v=MVw8N3hTfCI\n[Mailing List]: https://groups.google.com/forum/#!forum/karma-users\n[Issuetracker]: https://github.com/karma-runner/karma/issues\n[@JsKarma]: http://twitter.com/JsKarma\n[RequireJS]: http://requirejs.org/\n[Istanbul]: https://github.com/gotwarlost/istanbul\n\n[Browsers]: http://karma-runner.github.io/0.8/config/browsers.html\n[Versioning]: http://karma-runner.github.io/0.8/about/versioning.html\n[Configuration File Overview]: http://karma-runner.github.io/0.8/config/configuration-file.html\n[docs]: http://karma-runner.github.io\n[Docs]: http://karma-runner.github.io\n[website]: http://karma-runner.github.io\n',
223 silly resolved     readmeFilename: 'README.md',
223 silly resolved     _id: 'karma@0.10.2',
223 silly resolved     dist: { shasum: 'c16c8bbd24fe6d1c186f9c4f208454de5a739287' },
223 silly resolved     _from: 'karma@',
223 silly resolved     _resolved: 'https://registry.npmjs.org/karma/-/karma-0.10.2.tgz' } ]
224 info install karma@0.10.2 into /usr/local/lib
225 info installOne karma@0.10.2
226 verbose from cache /Users/ckgagan/.npm/karma/0.10.2/package/package.json
227 info /usr/local/lib/node_modules/karma unbuild
228 verbose read json /usr/local/lib/node_modules/karma/package.json
229 verbose tar unpack /Users/ckgagan/.npm/karma/0.10.2/package.tgz
230 silly lockFile dbe64a29-usr-local-lib-node-modules-karma /usr/local/lib/node_modules/karma
231 verbose lock /usr/local/lib/node_modules/karma /Users/ckgagan/.npm/dbe64a29-usr-local-lib-node-modules-karma.lock
232 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
233 verbose lock /Users/ckgagan/.npm/karma/0.10.2/package.tgz /Users/ckgagan/.npm/1078c2c2-gan-npm-karma-0-10-2-package-tgz.lock
234 silly gunzTarPerm modes [ '755', '644' ]
235 silly gunzTarPerm extractEntry package.json
236 silly gunzTarPerm extractEntry README.md
237 silly gunzTarPerm extractEntry LICENSE
238 silly gunzTarPerm extractEntry config.tpl.js
239 silly gunzTarPerm extractEntry karma-completion.sh
240 silly gunzTarPerm extractEntry lib/browser.js
241 silly gunzTarPerm extractEntry lib/executor.js
242 silly gunzTarPerm extractEntry lib/file-list.js
243 silly gunzTarPerm extractEntry lib/helper.js
244 silly gunzTarPerm extractEntry lib/events.js
245 silly gunzTarPerm extractEntry lib/init.js
246 silly gunzTarPerm extractEntry lib/launcher.js
247 silly gunzTarPerm extractEntry lib/cli.js
248 silly gunzTarPerm extractEntry lib/logger.js
249 silly gunzTarPerm extractEntry lib/server.js
250 silly gunzTarPerm extractEntry lib/constants.js
251 silly gunzTarPerm extractEntry lib/plugin.js
252 silly gunzTarPerm extractEntry lib/config.js
253 silly gunzTarPerm extractEntry lib/preprocessor.js
254 silly gunzTarPerm extractEntry lib/completion.js
255 silly gunzTarPerm extractEntry lib/reporter.js
256 silly gunzTarPerm extractEntry lib/watcher.js
257 silly gunzTarPerm extractEntry lib/runner.js
258 silly gunzTarPerm extractEntry lib/index.js
259 silly gunzTarPerm extractEntry lib/web-server.js
260 silly gunzTarPerm extractEntry lib/reporters/Base.js
261 silly gunzTarPerm extractEntry lib/reporters/BaseColor.js
262 silly gunzTarPerm extractEntry lib/reporters/Dots.js
263 silly gunzTarPerm extractEntry lib/reporters/DotsColor.js
264 silly gunzTarPerm extractEntry lib/reporters/Multi.js
265 silly gunzTarPerm extractEntry lib/reporters/Progress.js
266 silly gunzTarPerm extractEntry lib/reporters/ProgressColor.js
267 silly gunzTarPerm extractEntry lib/runner.js.orig
268 silly gunzTarPerm extractEntry lib/middleware/common.js
269 silly gunzTarPerm extractEntry lib/middleware/karma.js
270 silly gunzTarPerm extractEntry lib/middleware/proxy.js
271 silly gunzTarPerm extractEntry lib/middleware/runner.js
272 silly gunzTarPerm extractEntry lib/middleware/source-files.js
273 silly gunzTarPerm extractEntry lib/server.js.orig
274 silly gunzTarPerm extractEntry lib/cli.js.orig
275 silly gunzTarPerm extractEntry lib/launchers/Base.js
276 silly gunzTarPerm extractEntry CHANGELOG.md
277 silly gunzTarPerm extractEntry config.tpl.coffee
278 silly gunzTarPerm extractEntry bin/karma
279 silly gunzTarPerm extractEntry static/karma.js
280 silly gunzTarPerm extractEntry static/client.html
281 silly gunzTarPerm extractEntry static/context.html
282 silly gunzTarPerm extractEntry static/debug.html
283 silly gunzTarPerm extractEntry test-results.xml
284 silly gunzTarPerm extractEntry thesis.pdf
285 verbose read json /usr/local/lib/node_modules/karma/package.json
286 silly lockFile dbe64a29-usr-local-lib-node-modules-karma /usr/local/lib/node_modules/karma
287 silly lockFile dbe64a29-usr-local-lib-node-modules-karma /usr/local/lib/node_modules/karma
288 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
289 silly lockFile 1078c2c2-gan-npm-karma-0-10-2-package-tgz /Users/ckgagan/.npm/karma/0.10.2/package.tgz
290 info preinstall karma@0.10.2
291 verbose from cache /usr/local/lib/node_modules/karma/package.json
292 verbose readDependencies using package.json deps
293 verbose from cache /usr/local/lib/node_modules/karma/package.json
294 verbose readDependencies using package.json deps
295 verbose cache add [ 'di@~0.0.1', null ]
296 verbose cache add name=undefined spec="di@~0.0.1" args=["di@~0.0.1",null]
297 verbose parsed url { pathname: 'di@~0.0.1', path: 'di@~0.0.1', href: 'di@~0.0.1' }
298 verbose cache add name="di" spec="~0.0.1" args=["di","~0.0.1"]
299 verbose parsed url { pathname: '~0.0.1', path: '~0.0.1', href: '~0.0.1' }
300 verbose addNamed [ 'di', '~0.0.1' ]
301 verbose addNamed [ null, '>=0.0.1- <0.1.0-' ]
302 silly lockFile 8333ef40-di-0-0-1 di@~0.0.1
303 verbose lock di@~0.0.1 /Users/ckgagan/.npm/8333ef40-di-0-0-1.lock
304 verbose cache add [ 'socket.io@~0.9.13', null ]
305 verbose cache add name=undefined spec="socket.io@~0.9.13" args=["socket.io@~0.9.13",null]
306 verbose parsed url { pathname: 'socket.io@~0.9.13',
306 verbose parsed url   path: 'socket.io@~0.9.13',
306 verbose parsed url   href: 'socket.io@~0.9.13' }
307 verbose cache add name="socket.io" spec="~0.9.13" args=["socket.io","~0.9.13"]
308 verbose parsed url { pathname: '~0.9.13', path: '~0.9.13', href: '~0.9.13' }
309 verbose addNamed [ 'socket.io', '~0.9.13' ]
310 verbose addNamed [ null, '>=0.9.13- <0.10.0-' ]
311 silly lockFile 729f5b40-socket-io-0-9-13 socket.io@~0.9.13
312 verbose lock socket.io@~0.9.13 /Users/ckgagan/.npm/729f5b40-socket-io-0-9-13.lock
313 silly addNameRange { name: 'di', range: '>=0.0.1- <0.1.0-', hasData: false }
314 silly addNameRange { name: 'socket.io',
314 silly addNameRange   range: '>=0.9.13- <0.10.0-',
314 silly addNameRange   hasData: false }
315 verbose url raw di
316 verbose url resolving [ 'https://registry.npmjs.org/', './di' ]
317 verbose url resolved https://registry.npmjs.org/di
318 info trying registry request attempt 1 at 07:13:58
319 http GET https://registry.npmjs.org/di
320 verbose cache add [ 'chokidar@~0.6', null ]
321 verbose cache add name=undefined spec="chokidar@~0.6" args=["chokidar@~0.6",null]
322 verbose parsed url { pathname: 'chokidar@~0.6',
322 verbose parsed url   path: 'chokidar@~0.6',
322 verbose parsed url   href: 'chokidar@~0.6' }
323 verbose cache add name="chokidar" spec="~0.6" args=["chokidar","~0.6"]
324 verbose parsed url { pathname: '~0.6', path: '~0.6', href: '~0.6' }
325 verbose addNamed [ 'chokidar', '~0.6' ]
326 verbose addNamed [ null, '>=0.6.0- <0.7.0-' ]
327 silly lockFile 89107558-chokidar-0-6 chokidar@~0.6
328 verbose lock chokidar@~0.6 /Users/ckgagan/.npm/89107558-chokidar-0-6.lock
329 verbose cache add [ 'glob@~3.1.21', null ]
330 verbose cache add name=undefined spec="glob@~3.1.21" args=["glob@~3.1.21",null]
331 verbose parsed url { pathname: 'glob@~3.1.21',
331 verbose parsed url   path: 'glob@~3.1.21',
331 verbose parsed url   href: 'glob@~3.1.21' }
332 verbose cache add name="glob" spec="~3.1.21" args=["glob","~3.1.21"]
333 verbose parsed url { pathname: '~3.1.21', path: '~3.1.21', href: '~3.1.21' }
334 verbose addNamed [ 'glob', '~3.1.21' ]
335 verbose addNamed [ null, '>=3.1.21- <3.2.0-' ]
336 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
337 verbose lock glob@~3.1.21 /Users/ckgagan/.npm/b5074ddc-glob-3-1-21.lock
338 verbose cache add [ 'minimatch@~0.2', null ]
339 verbose cache add name=undefined spec="minimatch@~0.2" args=["minimatch@~0.2",null]
340 verbose parsed url { pathname: 'minimatch@~0.2',
340 verbose parsed url   path: 'minimatch@~0.2',
340 verbose parsed url   href: 'minimatch@~0.2' }
341 verbose cache add name="minimatch" spec="~0.2" args=["minimatch","~0.2"]
342 verbose parsed url { pathname: '~0.2', path: '~0.2', href: '~0.2' }
343 verbose addNamed [ 'minimatch', '~0.2' ]
344 verbose addNamed [ null, '>=0.2.0- <0.3.0-' ]
345 silly lockFile fe0ddac6-minimatch-0-2 minimatch@~0.2
346 verbose lock minimatch@~0.2 /Users/ckgagan/.npm/fe0ddac6-minimatch-0-2.lock
347 verbose cache add [ 'http-proxy@~0.10', null ]
348 verbose cache add name=undefined spec="http-proxy@~0.10" args=["http-proxy@~0.10",null]
349 verbose parsed url { pathname: 'http-proxy@~0.10',
349 verbose parsed url   path: 'http-proxy@~0.10',
349 verbose parsed url   href: 'http-proxy@~0.10' }
350 verbose cache add name="http-proxy" spec="~0.10" args=["http-proxy","~0.10"]
351 verbose parsed url { pathname: '~0.10', path: '~0.10', href: '~0.10' }
352 verbose addNamed [ 'http-proxy', '~0.10' ]
353 verbose addNamed [ null, '>=0.10.0- <0.11.0-' ]
354 silly lockFile 6486d2d0-http-proxy-0-10 http-proxy@~0.10
355 verbose lock http-proxy@~0.10 /Users/ckgagan/.npm/6486d2d0-http-proxy-0-10.lock
356 verbose cache add [ 'optimist@~0.3', null ]
357 verbose cache add name=undefined spec="optimist@~0.3" args=["optimist@~0.3",null]
358 verbose parsed url { pathname: 'optimist@~0.3',
358 verbose parsed url   path: 'optimist@~0.3',
358 verbose parsed url   href: 'optimist@~0.3' }
359 verbose cache add name="optimist" spec="~0.3" args=["optimist","~0.3"]
360 verbose parsed url { pathname: '~0.3', path: '~0.3', href: '~0.3' }
361 verbose addNamed [ 'optimist', '~0.3' ]
362 verbose addNamed [ null, '>=0.3.0- <0.4.0-' ]
363 silly lockFile c01d0ea5-optimist-0-3 optimist@~0.3
364 verbose lock optimist@~0.3 /Users/ckgagan/.npm/c01d0ea5-optimist-0-3.lock
365 verbose cache add [ 'coffee-script@~1.6', null ]
366 verbose cache add name=undefined spec="coffee-script@~1.6" args=["coffee-script@~1.6",null]
367 verbose parsed url { pathname: 'coffee-script@~1.6',
367 verbose parsed url   path: 'coffee-script@~1.6',
367 verbose parsed url   href: 'coffee-script@~1.6' }
368 verbose cache add name="coffee-script" spec="~1.6" args=["coffee-script","~1.6"]
369 verbose parsed url { pathname: '~1.6', path: '~1.6', href: '~1.6' }
370 verbose addNamed [ 'coffee-script', '~1.6' ]
371 verbose addNamed [ null, '>=1.6.0- <1.7.0-' ]
372 silly lockFile d0c13b8a-coffee-script-1-6 coffee-script@~1.6
373 verbose lock coffee-script@~1.6 /Users/ckgagan/.npm/d0c13b8a-coffee-script-1-6.lock
374 verbose cache add [ 'rimraf@~2.1', null ]
375 verbose cache add name=undefined spec="rimraf@~2.1" args=["rimraf@~2.1",null]
376 verbose parsed url { pathname: 'rimraf@~2.1',
376 verbose parsed url   path: 'rimraf@~2.1',
376 verbose parsed url   href: 'rimraf@~2.1' }
377 verbose cache add name="rimraf" spec="~2.1" args=["rimraf","~2.1"]
378 verbose parsed url { pathname: '~2.1', path: '~2.1', href: '~2.1' }
379 verbose addNamed [ 'rimraf', '~2.1' ]
380 verbose addNamed [ null, '>=2.1.0- <2.2.0-' ]
381 silly lockFile 37a759a6-rimraf-2-1 rimraf@~2.1
382 verbose lock rimraf@~2.1 /Users/ckgagan/.npm/37a759a6-rimraf-2-1.lock
383 verbose cache add [ 'q@~0.9', null ]
384 verbose cache add name=undefined spec="q@~0.9" args=["q@~0.9",null]
385 verbose parsed url { pathname: 'q@~0.9', path: 'q@~0.9', href: 'q@~0.9' }
386 verbose cache add name="q" spec="~0.9" args=["q","~0.9"]
387 verbose parsed url { pathname: '~0.9', path: '~0.9', href: '~0.9' }
388 verbose addNamed [ 'q', '~0.9' ]
389 verbose addNamed [ null, '>=0.9.0- <0.10.0-' ]
390 silly lockFile 81c03ade-q-0-9 q@~0.9
391 verbose lock q@~0.9 /Users/ckgagan/.npm/81c03ade-q-0-9.lock
392 verbose cache add [ 'colors@0.6.0-1', null ]
393 verbose cache add name=undefined spec="colors@0.6.0-1" args=["colors@0.6.0-1",null]
394 verbose parsed url { pathname: 'colors@0.6.0-1',
394 verbose parsed url   path: 'colors@0.6.0-1',
394 verbose parsed url   href: 'colors@0.6.0-1' }
395 verbose cache add name="colors" spec="0.6.0-1" args=["colors","0.6.0-1"]
396 verbose parsed url { pathname: '0.6.0-1', path: '0.6.0-1', href: '0.6.0-1' }
397 verbose addNamed [ 'colors', '0.6.0-1' ]
398 verbose addNamed [ '0.6.0-1', '0.6.0-1' ]
399 silly lockFile 02eba27f-colors-0-6-0-1 colors@0.6.0-1
400 verbose lock colors@0.6.0-1 /Users/ckgagan/.npm/02eba27f-colors-0-6-0-1.lock
401 verbose cache add [ 'lodash@~1.1', null ]
402 verbose cache add name=undefined spec="lodash@~1.1" args=["lodash@~1.1",null]
403 verbose parsed url { pathname: 'lodash@~1.1',
403 verbose parsed url   path: 'lodash@~1.1',
403 verbose parsed url   href: 'lodash@~1.1' }
404 verbose cache add name="lodash" spec="~1.1" args=["lodash","~1.1"]
405 verbose parsed url { pathname: '~1.1', path: '~1.1', href: '~1.1' }
406 verbose addNamed [ 'lodash', '~1.1' ]
407 verbose addNamed [ null, '>=1.1.0- <1.2.0-' ]
408 silly lockFile 304390bd-lodash-1-1 lodash@~1.1
409 verbose lock lodash@~1.1 /Users/ckgagan/.npm/304390bd-lodash-1-1.lock
410 verbose cache add [ 'mime@~1.2', null ]
411 verbose cache add name=undefined spec="mime@~1.2" args=["mime@~1.2",null]
412 verbose parsed url { pathname: 'mime@~1.2', path: 'mime@~1.2', href: 'mime@~1.2' }
413 verbose cache add name="mime" spec="~1.2" args=["mime","~1.2"]
414 verbose parsed url { pathname: '~1.2', path: '~1.2', href: '~1.2' }
415 verbose addNamed [ 'mime', '~1.2' ]
416 verbose addNamed [ null, '>=1.2.0- <1.3.0-' ]
417 silly lockFile f7091508-mime-1-2 mime@~1.2
418 verbose lock mime@~1.2 /Users/ckgagan/.npm/f7091508-mime-1-2.lock
419 verbose cache add [ 'log4js@~0.6.3', null ]
420 verbose cache add name=undefined spec="log4js@~0.6.3" args=["log4js@~0.6.3",null]
421 verbose parsed url { pathname: 'log4js@~0.6.3',
421 verbose parsed url   path: 'log4js@~0.6.3',
421 verbose parsed url   href: 'log4js@~0.6.3' }
422 verbose cache add name="log4js" spec="~0.6.3" args=["log4js","~0.6.3"]
423 verbose parsed url { pathname: '~0.6.3', path: '~0.6.3', href: '~0.6.3' }
424 verbose addNamed [ 'log4js', '~0.6.3' ]
425 verbose addNamed [ null, '>=0.6.3- <0.7.0-' ]
426 silly lockFile f3becdd9-log4js-0-6-3 log4js@~0.6.3
427 verbose lock log4js@~0.6.3 /Users/ckgagan/.npm/f3becdd9-log4js-0-6-3.lock
428 verbose cache add [ 'useragent@~2.0.4', null ]
429 verbose cache add name=undefined spec="useragent@~2.0.4" args=["useragent@~2.0.4",null]
430 verbose parsed url { pathname: 'useragent@~2.0.4',
430 verbose parsed url   path: 'useragent@~2.0.4',
430 verbose parsed url   href: 'useragent@~2.0.4' }
431 verbose cache add name="useragent" spec="~2.0.4" args=["useragent","~2.0.4"]
432 verbose parsed url { pathname: '~2.0.4', path: '~2.0.4', href: '~2.0.4' }
433 verbose addNamed [ 'useragent', '~2.0.4' ]
434 verbose addNamed [ null, '>=2.0.4- <2.1.0-' ]
435 silly lockFile beb780e8-useragent-2-0-4 useragent@~2.0.4
436 verbose lock useragent@~2.0.4 /Users/ckgagan/.npm/beb780e8-useragent-2-0-4.lock
437 verbose cache add [ 'graceful-fs@~1.2.1', null ]
438 verbose cache add name=undefined spec="graceful-fs@~1.2.1" args=["graceful-fs@~1.2.1",null]
439 verbose parsed url { pathname: 'graceful-fs@~1.2.1',
439 verbose parsed url   path: 'graceful-fs@~1.2.1',
439 verbose parsed url   href: 'graceful-fs@~1.2.1' }
440 verbose cache add name="graceful-fs" spec="~1.2.1" args=["graceful-fs","~1.2.1"]
441 verbose parsed url { pathname: '~1.2.1', path: '~1.2.1', href: '~1.2.1' }
442 verbose addNamed [ 'graceful-fs', '~1.2.1' ]
443 verbose addNamed [ null, '>=1.2.1- <1.3.0-' ]
444 silly lockFile a1fba300-graceful-fs-1-2-1 graceful-fs@~1.2.1
445 verbose lock graceful-fs@~1.2.1 /Users/ckgagan/.npm/a1fba300-graceful-fs-1-2-1.lock
446 verbose cache add [ 'connect@~2.8.4', null ]
447 verbose cache add name=undefined spec="connect@~2.8.4" args=["connect@~2.8.4",null]
448 verbose parsed url { pathname: 'connect@~2.8.4',
448 verbose parsed url   path: 'connect@~2.8.4',
448 verbose parsed url   href: 'connect@~2.8.4' }
449 verbose cache add name="connect" spec="~2.8.4" args=["connect","~2.8.4"]
450 verbose parsed url { pathname: '~2.8.4', path: '~2.8.4', href: '~2.8.4' }
451 verbose addNamed [ 'connect', '~2.8.4' ]
452 verbose addNamed [ null, '>=2.8.4- <2.9.0-' ]
453 silly lockFile 8fa706a3-connect-2-8-4 connect@~2.8.4
454 verbose lock connect@~2.8.4 /Users/ckgagan/.npm/8fa706a3-connect-2-8-4.lock
455 verbose url raw socket.io
456 verbose url resolving [ 'https://registry.npmjs.org/', './socket.io' ]
457 verbose url resolved https://registry.npmjs.org/socket.io
458 info trying registry request attempt 1 at 07:13:58
459 http GET https://registry.npmjs.org/socket.io
460 silly addNameRange { name: 'chokidar', range: '>=0.6.0- <0.7.0-', hasData: false }
461 silly addNameRange { name: 'glob', range: '>=3.1.21- <3.2.0-', hasData: false }
462 silly addNameRange { name: 'optimist', range: '>=0.3.0- <0.4.0-', hasData: false }
463 silly addNameRange { name: 'minimatch', range: '>=0.2.0- <0.3.0-', hasData: false }
464 silly addNameRange { name: 'rimraf', range: '>=2.1.0- <2.2.0-', hasData: false }
465 silly addNameRange { name: 'q', range: '>=0.9.0- <0.10.0-', hasData: false }
466 silly addNameRange { name: 'lodash', range: '>=1.1.0- <1.2.0-', hasData: false }
467 silly addNameRange { name: 'mime', range: '>=1.2.0- <1.3.0-', hasData: false }
468 silly addNameRange { name: 'log4js', range: '>=0.6.3- <0.7.0-', hasData: false }
469 silly addNameRange { name: 'useragent', range: '>=2.0.4- <2.1.0-', hasData: false }
470 silly addNameRange { name: 'graceful-fs',
470 silly addNameRange   range: '>=1.2.1- <1.3.0-',
470 silly addNameRange   hasData: false }
471 verbose url raw chokidar
472 verbose url resolving [ 'https://registry.npmjs.org/', './chokidar' ]
473 verbose url resolved https://registry.npmjs.org/chokidar
474 info trying registry request attempt 1 at 07:13:58
475 http GET https://registry.npmjs.org/chokidar
476 silly addNameRange { name: 'connect', range: '>=2.8.4- <2.9.0-', hasData: false }
477 verbose url raw glob
478 verbose url resolving [ 'https://registry.npmjs.org/', './glob' ]
479 verbose url resolved https://registry.npmjs.org/glob
480 info trying registry request attempt 1 at 07:13:58
481 http GET https://registry.npmjs.org/glob
482 silly addNameRange { name: 'coffee-script',
482 silly addNameRange   range: '>=1.6.0- <1.7.0-',
482 silly addNameRange   hasData: false }
483 silly addNameRange { name: 'http-proxy',
483 silly addNameRange   range: '>=0.10.0- <0.11.0-',
483 silly addNameRange   hasData: false }
484 verbose url raw q
485 verbose url resolving [ 'https://registry.npmjs.org/', './q' ]
486 verbose url resolved https://registry.npmjs.org/q
487 info trying registry request attempt 1 at 07:13:58
488 http GET https://registry.npmjs.org/q
489 verbose url raw lodash
490 verbose url resolving [ 'https://registry.npmjs.org/', './lodash' ]
491 verbose url resolved https://registry.npmjs.org/lodash
492 info trying registry request attempt 1 at 07:13:58
493 http GET https://registry.npmjs.org/lodash
494 verbose url raw log4js
495 verbose url resolving [ 'https://registry.npmjs.org/', './log4js' ]
496 verbose url resolved https://registry.npmjs.org/log4js
497 info trying registry request attempt 1 at 07:13:58
498 http GET https://registry.npmjs.org/log4js
499 verbose url raw useragent
500 verbose url resolving [ 'https://registry.npmjs.org/', './useragent' ]
501 verbose url resolved https://registry.npmjs.org/useragent
502 info trying registry request attempt 1 at 07:13:58
503 http GET https://registry.npmjs.org/useragent
504 verbose url raw mime
505 verbose url resolving [ 'https://registry.npmjs.org/', './mime' ]
506 verbose url resolved https://registry.npmjs.org/mime
507 info trying registry request attempt 1 at 07:13:58
508 http GET https://registry.npmjs.org/mime
509 verbose url raw http-proxy
510 verbose url resolving [ 'https://registry.npmjs.org/', './http-proxy' ]
511 verbose url resolved https://registry.npmjs.org/http-proxy
512 info trying registry request attempt 1 at 07:13:58
513 http GET https://registry.npmjs.org/http-proxy
514 verbose url raw connect
515 verbose url resolving [ 'https://registry.npmjs.org/', './connect' ]
516 verbose url resolved https://registry.npmjs.org/connect
517 info trying registry request attempt 1 at 07:13:59
518 http GET https://registry.npmjs.org/connect
519 verbose url raw colors/0.6.0-1
520 verbose url resolving [ 'https://registry.npmjs.org/', './colors/0.6.0-1' ]
521 verbose url resolved https://registry.npmjs.org/colors/0.6.0-1
522 info trying registry request attempt 1 at 07:13:59
523 verbose etag "EBTFFXNCI7AULBZC8AH40ROR6"
524 http GET https://registry.npmjs.org/colors/0.6.0-1
525 verbose url raw rimraf
526 verbose url resolving [ 'https://registry.npmjs.org/', './rimraf' ]
527 verbose url resolved https://registry.npmjs.org/rimraf
528 info trying registry request attempt 1 at 07:13:59
529 verbose etag "DS51XMA9EUEJ34BD66AVLVDAA"
530 http GET https://registry.npmjs.org/rimraf
531 verbose url raw coffee-script
532 verbose url resolving [ 'https://registry.npmjs.org/', './coffee-script' ]
533 verbose url resolved https://registry.npmjs.org/coffee-script
534 info trying registry request attempt 1 at 07:13:59
535 verbose etag "4SERN669FTVR28WAALP09FCNQ"
536 http GET https://registry.npmjs.org/coffee-script
537 verbose url raw graceful-fs
538 verbose url resolving [ 'https://registry.npmjs.org/', './graceful-fs' ]
539 verbose url resolved https://registry.npmjs.org/graceful-fs
540 info trying registry request attempt 1 at 07:13:59
541 verbose etag "4QB314Y3S11CD6RLWHEK13W"
542 http GET https://registry.npmjs.org/graceful-fs
543 verbose url raw optimist
544 verbose url resolving [ 'https://registry.npmjs.org/', './optimist' ]
545 verbose url resolved https://registry.npmjs.org/optimist
546 info trying registry request attempt 1 at 07:13:59
547 verbose etag "BJZLAKN0FJC4QZ82JPIU71LZD"
548 http GET https://registry.npmjs.org/optimist
549 verbose url raw minimatch
550 verbose url resolving [ 'https://registry.npmjs.org/', './minimatch' ]
551 verbose url resolved https://registry.npmjs.org/minimatch
552 info trying registry request attempt 1 at 07:13:59
553 verbose etag "5JX71LVFYVTO8MP94CQJNAUUL"
554 http GET https://registry.npmjs.org/minimatch
555 http 200 https://registry.npmjs.org/di
556 silly registry.get cb [ 200,
556 silly registry.get   { vary: 'Accept',
556 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
556 silly registry.get     etag: '"4BUUIQQOOZIHOEVKYVMUSHMLX"',
556 silly registry.get     date: 'Sat, 07 Sep 2013 01:29:00 GMT',
556 silly registry.get     'content-type': 'application/json',
556 silly registry.get     'content-length': '3237' } ]
557 silly addNameRange number 2 { name: 'di', range: '>=0.0.1- <0.1.0-', hasData: true }
558 silly addNameRange versions [ 'di', [ '0.0.0', '0.0.1' ] ]
559 verbose addNamed [ 'di', '0.0.1' ]
560 verbose addNamed [ '0.0.1', '0.0.1' ]
561 silly lockFile fc79c1df-di-0-0-1 di@0.0.1
562 verbose lock di@0.0.1 /Users/ckgagan/.npm/fc79c1df-di-0-0-1.lock
563 silly lockFile f3def4ad-gistry-npmjs-org-di-di-0-0-1-tgz https://registry.npmjs.org/di/-/di-0.0.1.tgz
564 verbose lock https://registry.npmjs.org/di/-/di-0.0.1.tgz /Users/ckgagan/.npm/f3def4ad-gistry-npmjs-org-di-di-0-0-1-tgz.lock
565 verbose addRemoteTarball [ 'https://registry.npmjs.org/di/-/di-0.0.1.tgz',
565 verbose addRemoteTarball   '806649326ceaa7caa3306d75d985ea2748ba913c' ]
566 info retry fetch attempt 1 at 07:14:01
567 verbose fetch to= /Users/ckgagan/tmp/npm-36436/1378517341565-0.08577791298739612/tmp.tgz
568 http GET https://registry.npmjs.org/di/-/di-0.0.1.tgz
569 http 200 https://registry.npmjs.org/chokidar
570 silly registry.get cb [ 200,
570 silly registry.get   { vary: 'Accept',
570 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
570 silly registry.get     etag: '"AP0Q227LQ7JEH4M6ZBOJTO3JZ"',
570 silly registry.get     date: 'Sat, 07 Sep 2013 01:29:01 GMT',
570 silly registry.get     'content-type': 'application/json',
570 silly registry.get     'content-length': '65225' } ]
571 silly addNameRange number 2 { name: 'chokidar', range: '>=0.6.0- <0.7.0-', hasData: true }
572 silly addNameRange versions [ 'chokidar',
572 silly addNameRange   [ '0.1.1',
572 silly addNameRange     '0.2.0',
572 silly addNameRange     '0.2.1',
572 silly addNameRange     '0.2.2',
572 silly addNameRange     '0.2.3',
572 silly addNameRange     '0.2.4',
572 silly addNameRange     '0.2.5',
572 silly addNameRange     '0.2.6',
572 silly addNameRange     '0.3.0',
572 silly addNameRange     '0.4.0',
572 silly addNameRange     '0.5.0',
572 silly addNameRange     '0.5.1',
572 silly addNameRange     '0.5.2',
572 silly addNameRange     '0.5.3',
572 silly addNameRange     '0.6.0',
572 silly addNameRange     '0.6.1',
572 silly addNameRange     '0.6.2',
572 silly addNameRange     '0.6.3' ] ]
573 verbose addNamed [ 'chokidar', '0.6.3' ]
574 verbose addNamed [ '0.6.3', '0.6.3' ]
575 silly lockFile 2b7757e4-chokidar-0-6-3 chokidar@0.6.3
576 verbose lock chokidar@0.6.3 /Users/ckgagan/.npm/2b7757e4-chokidar-0-6-3.lock
577 silly lockFile f1bc497f--org-chokidar-chokidar-0-6-3-tgz https://registry.npmjs.org/chokidar/-/chokidar-0.6.3.tgz
578 verbose lock https://registry.npmjs.org/chokidar/-/chokidar-0.6.3.tgz /Users/ckgagan/.npm/f1bc497f--org-chokidar-chokidar-0-6-3-tgz.lock
579 verbose addRemoteTarball [ 'https://registry.npmjs.org/chokidar/-/chokidar-0.6.3.tgz',
579 verbose addRemoteTarball   'e85968fa235f21773d388c617af085bf2104425a' ]
580 info retry fetch attempt 1 at 07:14:12
581 verbose fetch to= /Users/ckgagan/tmp/npm-36436/1378517352598-0.5647971821017563/tmp.tgz
582 http GET https://registry.npmjs.org/chokidar/-/chokidar-0.6.3.tgz
583 http 200 https://registry.npmjs.org/socket.io
584 silly registry.get cb [ 200,
584 silly registry.get   { vary: 'Accept',
584 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
584 silly registry.get     etag: '"61247GXU9C58TYLVCLFM8SH3C"',
584 silly registry.get     date: 'Sat, 07 Sep 2013 01:29:01 GMT',
584 silly registry.get     'content-type': 'application/json',
584 silly registry.get     'content-length': '230320' } ]
585 info retry will retry, error on last attempt: Error: socket hang up
586 silly addNameRange number 2 { name: 'socket.io', range: '>=0.9.13- <0.10.0-', hasData: true }
587 silly addNameRange versions [ 'socket.io',
587 silly addNameRange   [ '0.3.8',
587 silly addNameRange     '0.4.0',
587 silly addNameRange     '0.4.1',
587 silly addNameRange     '0.5.1',
587 silly addNameRange     '0.5.3',
587 silly addNameRange     '0.6.0',
587 silly addNameRange     '0.6.1',
587 silly addNameRange     '0.6.3',
587 silly addNameRange     '0.6.4',
587 silly addNameRange     '0.6.5',
587 silly addNameRange     '0.6.6',
587 silly addNameRange     '0.6.7',
587 silly addNameRange     '0.6.8',
587 silly addNameRange     '0.6.9',
587 silly addNameRange     '0.6.10',
587 silly addNameRange     '0.6.11',
587 silly addNameRange     '0.6.12',
587 silly addNameRange     '0.6.14',
587 silly addNameRange     '0.6.15',
587 silly addNameRange     '0.6.16',
587 silly addNameRange     '0.6.17',
587 silly addNameRange     '0.6.18',
587 silly addNameRange     '0.7.0',
587 silly addNameRange     '0.7.1',
587 silly addNameRange     '0.7.2',
587 silly addNameRange     '0.7.3',
587 silly addNameRange     '0.7.4',
587 silly addNameRange     '0.7.5',
587 silly addNameRange     '0.7.6',
587 silly addNameRange     '0.7.7',
587 silly addNameRange     '0.7.8',
587 silly addNameRange     '0.7.9',
587 silly addNameRange     '0.7.10',
587 silly addNameRange     '0.7.11',
587 silly addNameRange     '0.8.0',
587 silly addNameRange     '0.8.1',
587 silly addNameRange     '0.8.2',
587 silly addNameRange     '0.8.3',
587 silly addNameRange     '0.8.4',
587 silly addNameRange     '0.8.5',
587 silly addNameRange     '0.8.6',
587 silly addNameRange     '0.8.7',
587 silly addNameRange     '0.9.0',
587 silly addNameRange     '0.9.1',
587 silly addNameRange     '0.9.1-1',
587 silly addNameRange     '0.9.2',
587 silly addNameRange     '0.9.3',
587 silly addNameRange     '0.9.4',
587 silly addNameRange     '0.9.5',
587 silly addNameRange     '0.9.6',
587 silly addNameRange     '0.9.7',
587 silly addNameRange     '0.9.8',
587 silly addNameRange     '0.9.9',
587 silly addNameRange     '0.9.10',
587 silly addNameRange     '0.9.11',
587 silly addNameRange     '0.9.12',
587 silly addNameRange     '0.9.13',
587 silly addNameRange     '0.9.14',
587 silly addNameRange     '0.9.15',
587 silly addNameRange     '0.9.16' ] ]
588 verbose addNamed [ 'socket.io', '0.9.16' ]
589 verbose addNamed [ '0.9.16', '0.9.16' ]
590 silly lockFile a7acce22-socket-io-0-9-16 socket.io@0.9.16
591 verbose lock socket.io@0.9.16 /Users/ckgagan/.npm/a7acce22-socket-io-0-9-16.lock
592 silly lockFile ca7568e4-g-socket-io-socket-io-0-9-16-tgz https://registry.npmjs.org/socket.io/-/socket.io-0.9.16.tgz
593 verbose lock https://registry.npmjs.org/socket.io/-/socket.io-0.9.16.tgz /Users/ckgagan/.npm/ca7568e4-g-socket-io-socket-io-0-9-16-tgz.lock
594 verbose addRemoteTarball [ 'https://registry.npmjs.org/socket.io/-/socket.io-0.9.16.tgz',
594 verbose addRemoteTarball   '3bab0444e49b55fbbc157424dbd41aa375a51a76' ]
595 info retry fetch attempt 1 at 07:14:56
596 verbose fetch to= /Users/ckgagan/tmp/npm-36436/1378517396033-0.7008871852885932/tmp.tgz
597 http GET https://registry.npmjs.org/socket.io/-/socket.io-0.9.16.tgz
598 http 200 https://registry.npmjs.org/glob
599 silly registry.get cb [ 200,
599 silly registry.get   { vary: 'Accept',
599 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
599 silly registry.get     etag: '"FHUPEI84RTD0TUQHAT6GOLU3"',
599 silly registry.get     date: 'Sat, 07 Sep 2013 01:29:01 GMT',
599 silly registry.get     'content-type': 'application/json',
599 silly registry.get     'content-length': '275669' } ]
600 info retry will retry, error on last attempt: Error: socket hang up
601 silly addNameRange number 2 { name: 'glob', range: '>=3.1.21- <3.2.0-', hasData: true }
602 silly addNameRange versions [ 'glob',
602 silly addNameRange   [ '1.1.0',
602 silly addNameRange     '2.0.9',
602 silly addNameRange     '2.0.8',
602 silly addNameRange     '2.0.7',
602 silly addNameRange     '2.1.0',
602 silly addNameRange     '3.0.0',
602 silly addNameRange     '3.0.1',
602 silly addNameRange     '3.1.0',
602 silly addNameRange     '3.1.1',
602 silly addNameRange     '3.1.2',
602 silly addNameRange     '3.1.3',
602 silly addNameRange     '3.1.4',
602 silly addNameRange     '3.1.5',
602 silly addNameRange     '3.1.6',
602 silly addNameRange     '3.1.7',
602 silly addNameRange     '3.1.9',
602 silly addNameRange     '3.1.10',
602 silly addNameRange     '3.1.11',
602 silly addNameRange     '3.1.12',
602 silly addNameRange     '3.1.13',
602 silly addNameRange     '3.1.14',
602 silly addNameRange     '3.1.15',
602 silly addNameRange     '3.1.16',
602 silly addNameRange     '3.1.17',
602 silly addNameRange     '3.1.18',
602 silly addNameRange     '3.1.19',
602 silly addNameRange     '3.1.20',
602 silly addNameRange     '3.1.21',
602 silly addNameRange     '3.2.0',
602 silly addNameRange     '3.2.1',
602 silly addNameRange     '3.2.3',
602 silly addNameRange     '3.2.4',
602 silly addNameRange     '3.2.5',
602 silly addNameRange     '3.2.6' ] ]
603 verbose addNamed [ 'glob', '3.1.21' ]
604 verbose addNamed [ '3.1.21', '3.1.21' ]
605 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
606 verbose lock glob@3.1.21 /Users/ckgagan/.npm/ab465912-glob-3-1-21.lock
607 silly lockFile a7e90008-y-npmjs-org-glob-glob-3-1-21-tgz https://registry.npmjs.org/glob/-/glob-3.1.21.tgz
608 verbose lock https://registry.npmjs.org/glob/-/glob-3.1.21.tgz /Users/ckgagan/.npm/a7e90008-y-npmjs-org-glob-glob-3-1-21-tgz.lock
609 verbose addRemoteTarball [ 'https://registry.npmjs.org/glob/-/glob-3.1.21.tgz',
609 verbose addRemoteTarball   'd29e0a055dea5138f4d07ed40e8982e83c2066cd' ]
610 info retry fetch attempt 1 at 07:14:57
611 verbose fetch to= /Users/ckgagan/tmp/npm-36436/1378517397821-0.3855945747345686/tmp.tgz
612 http GET https://registry.npmjs.org/glob/-/glob-3.1.21.tgz
613 http 200 https://registry.npmjs.org/log4js
614 verbose bad json {"_id":"log4js","_rev":"86-a7db35238dfb9bdcc0c632e7d529f825","name":"log4js","description":"Port of Log4js to work with node.","dist-tags":{"latest":"0.6.8"},"versions":{"0.1.0":{"name":"log4js","version":"0.1.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"test.js"},"directories":{"test":"spec"},"_id":"log4js@0.1.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.1.0.tgz","shasum":"b975d7eb1f5e9956b7d98cc2512be8b128f481f9"}},"0.2.0":{"name":"log4js","version":"0.2.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.0.tgz","shasum":"0076f8aeafde7bb6bdc39539e7ef3958164472e9"}},"0.2.2":{"name":"log4js","version":"0.2.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.2.tgz","shasum":"fbf3d34b2179610ab608e9f0d3db64ce0bc05c72"}},"0.2.3":{"name":"log4js","version":"0.2.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.3","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.2.5","dist":{"shasum":"c6b49fb2815a444dd0ac8bc5f7da0cc1a5be8c53","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.3.tgz"}},"0.2.4":{"name":"log4js","version":"0.2.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.4","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.1","dist":{"shasum":"5b718ae1ae7dded99d1931cd932f7d2c45ee64cc","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.4.tgz"}},"0.2.5":{"name":"log4js","version":"0.2.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.2.5","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"498522ff1b81b20803e2777ad44f10a03bd3f4fb","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.5.tgz"}},"0.2.6":{"name":"log4js","version":"0.2.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.2.6","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"78f73445823bcbc2c7c7245d3dbe04e3b211ac9a","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.6.tgz"}},"0.3.0":{"name":"log4js","version":"0.3.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.3.0","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"dbbe3c81babd72701b966897bdbb3689054b3901","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.0.tgz"}},"0.3.1":{"name":"log4js","version":"0.3.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"bd66ca1114f4cd452fa66dee1ddd265c5bf91b7b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.1.tgz"}},"0.3.2":{"name":"log4js","version":"0.3.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"d98b51e668b3e0cd476ca3e0c7a0d4bbe69a475b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.2.tgz"}},"0.3.3":{"name":"log4js","version":"0.3.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.3","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"f2a85b0208ae9cac940fa579bcb7d7001ca55b70","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.3.tgz"}},"0.3.4":{"name":"log4js","version":"0.3.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.4","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"7093a1fd1c1628d1c62e4b0681fbb4bb5422c648","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.4.tgz"}},"0.3.5":{"name":"log4js","version":"0.3.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.5","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"6cc991d3cac23ad523979da771c323b02b58c067","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.5.tgz"}},"0.3.6":{"name":"log4js","version":"0.3.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.6","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"c19558218cc2f41440e30c564ddea8e7842f651b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.6.tgz"}},"0.3.7":{"name":"log4js","version":"0.3.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.7/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.7","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"cbfefbbcc1dabae3de486d12d6dd25093fed40fc","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.7.tgz"}},"0.3.8":{"name":"log4js","version":"0.3.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.8/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.8","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"64a244857c811c7adc8ce0c88619671b91d8e9f1","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.8.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.3.9":{"name":"log4js","version":"0.3.9","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.9/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.9","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.5.0","_defaultsLoaded":true,"dist":{"shasum":"ac981d408f4a77b77627708268d3584f2bd38cf9","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.9.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.0":{"name":"log4js","version":"0.4.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.0","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"0145a12a704e8b7a48929be39f359954962ce9b6","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.0.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.1":{"name":"log4js","version":"0.4.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.1","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"d1280b39d54bd28ac396f173b0a291516e289264","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.1.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.2":{"name":"log4js","version":"0.4.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","compress-buffer":">= 0.5.0"},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.2","_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"a23ded0ab546b267b613f122595a215e2eff5b78","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.2.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\nNOTE: v0.3.8 of log4js is the last that will work with node versions older than 0.4. To use v0.3.9 you will need node 0.4 or later.\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code\nand tidied up some of the javascript. It includes a basic file logger, with log rolling based on file size, and also replaces node's console.log functions.\n\nNOTE: in v0.2.x require('log4js') returned a function, and you needed to call that function in your code before you could use it. This was to make testing easier. v0.3.x make use of [felixge's sandbox-module](https://github.com/felixge/node-sandboxed-module), so we don't need to return a function.\n\n## installation\n\nnpm install log4js\n\n## tests\n\nTests now use [vows](http://vowsjs.org), run with `vows test/*.js`.\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); //note the need to call the function\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n\n\n## configuration\n\nYou can either configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`) explicitly, or just let log4js look for a file called `log4js.json` (it looks in the current directory first, then the require paths, and finally looks for the default config included in the same directory as the `log4js.js` file).\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels\nto occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure(undefined, {}); // load 'log4js.json' from NODE_PATH\n\nOr:\n\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure(undefined, { reloadSecs: 300 }); // load 'log4js.json' from NODE_PATH\n\nYou can also pass an object to the configure function, which has the same properties as the json versions.\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n\n## connect/express logger\n\nA connect/express logger has been added to log4js, by [danbell](https://github.com/danbell). This allows connect/express servers to log using log4js. See example-connect-logger.js.\n\n    var log4js = require('./lib/log4js');\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n\n    logger.setLevel('INFO');\n\n    var app = require('express').createServer();\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO }));\n    });\n    app.get('/', function(req,res) {\n        res.send('hello world');\n    });\n    app.listen(5000);\n\nThe options object that is passed to log4js.connectLogger supports a format string the same as the connect/express logger. For example:\n\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO, format: ':method :url' }));\n    });\n\n## hook.io logger\n\nA [hook.io](https://github.com/hookio) logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"master\",\n          \"debug\": false,\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"worker\",\n          \"debug\": false\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var hookCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (hookCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    hookCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\nlog4js-master/worker.json hookio appender parameters will be passed into the Hook constructor directly, so you can specify hook-port, hook-host etc.\n*NOTE* hook.io appender will currently (and probably indefinitely) explode if you enable hook.io debug because of the way log4js overrides console.log\n\n## multiprocess (tcp socket) logger\n\nA multiprocess logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    # Will listen for connections on port and host\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"master\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\",\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    # Will connect to master (tcp server) and send stringified log events\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"worker\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\"\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var immaCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (immaCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    immaCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\n\n## gelf logger\n\nA gelf logger has been added to log4js, by [arifamirani](https://github.com/arifamirani). This allows log4js to log to [GELF](http://www.graylog2.org/about/gelf) compatible servers such as [Graylog](http://www.graylog2.org/). This is currently configuration based and needs the following configuration to be added to log4j.json. For example:\n\n<pre>\n  {\n    \"appenders\": [  \n      {\n        \"type\": \"gelf\",\n        \"host\": \"logs.mydomain.com\", //defaults to localhost\n        \"hostname\":\"mrs-dev\", //defaults to the value returned by os.hostname()\n        \"port\": \"12201\", //defaults to 12201\n        \"facility\": \"myapp\" //defaults to nodejs-server\n      }\n    }\n  }\n</pre>\n\n## author (of this node version)\n\nGareth Jones (csausdev - gareth.jones@sensis.com.au)\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.3":{"name":"log4js","version":"0.4.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","compress-buffer":"0.5.1"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"f463dc052a672b90d07bbc43120d7dcc6f8a6264","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.3.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\nNOTE: v0.3.8 of log4js is the last that will work with node versions older than 0.4. To use v0.3.9 you will need node 0.4 or later.\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code\nand tidied up some of the javascript. It includes a basic file logger, with log rolling based on file size, and also replaces node's console.log functions.\n\nNOTE: in v0.2.x require('log4js') returned a function, and you needed to call that function in your code before you could use it. This was to make testing easier. v0.3.x make use of [felixge's sandbox-module](https://github.com/felixge/node-sandboxed-module), so we don't need to return a function.\n\n## installation\n\nnpm install log4js\n\n## tests\n\nTests now use [vows](http://vowsjs.org), run with `vows test/*.js`.\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); //note the need to call the function\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n\n\n## configuration\n\nYou can either configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`) explicitly, or just let log4js look for a file called `log4js.json` (it looks in the current directory first, then the require paths, and finally looks for the default config included in the same directory as the `log4js.js` file).\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels\nto occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure(undefined, {}); // load 'log4js.json' from NODE_PATH\n\nOr:\n\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure(undefined, { reloadSecs: 300 }); // load 'log4js.json' from NODE_PATH\n\nYou can also pass an object to the configure function, which has the same properties as the json versions.\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n\n## connect/express logger\n\nA connect/express logger has been added to log4js, by [danbell](https://github.com/danbell). This allows connect/express servers to log using log4js. See example-connect-logger.js.\n\n    var log4js = require('./lib/log4js');\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n\n    logger.setLevel('INFO');\n\n    var app = require('express').createServer();\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO }));\n    });\n    app.get('/', function(req,res) {\n        res.send('hello world');\n    });\n    app.listen(5000);\n\nThe options object that is passed to log4js.connectLogger supports a format string the same as the connect/express logger. For example:\n\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO, format: ':method :url' }));\n    });\n\n## hook.io logger\n\nA [hook.io](https://github.com/hookio) logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"master\",\n          \"debug\": false,\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"worker\",\n          \"debug\": false\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var hookCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (hookCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    hookCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\nlog4js-master/worker.json hookio appender parameters will be passed into the Hook constructor directly, so you can specify hook-port, hook-host etc.\n*NOTE* hook.io appender will currently (and probably indefinitely) explode if you enable hook.io debug because of the way log4js overrides console.log\n\n## multiprocess (tcp socket) logger\n\nA multiprocess logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    # Will listen for connections on port and host\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"master\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\",\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    # Will connect to master (tcp server) and send stringified log events\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"worker\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\"\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var immaCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (immaCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    immaCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\n\n## gelf logger\n\nA gelf logger has been added to log4js, by [arifamirani](https://github.com/arifamirani). This allows log4js to log to [GELF](http://www.graylog2.org/about/gelf) compatible servers such as [Graylog](http://www.graylog2.org/). This is currently configuration based and needs the following configuration to be added to log4j.json. For example:\n\n<pre>\n  {\n    \"appenders\": [  \n      {\n        \"type\": \"gelf\",\n        \"host\": \"logs.mydomain.com\", //defaults to localhost\n        \"hostname\":\"mrs-dev\", //defaults to the value returned by os.hostname()\n        \"port\": \"12201\", //defaults to 12201\n        \"facility\": \"myapp\" //defaults to nodejs-server\n      }\n    }\n  }\n</pre>\n\n## author (of this node version)\n\nGareth Jones (csausdev - gareth.jones@sensis.com.au)\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.0":{"name":"log4js","version":"0.5.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"ad4233abfc3ee6670dabb622d42f00e318af41d0","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.0.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); \n    log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](wiki). Improve the [wiki](wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.1":{"name":"log4js","version":"0.5.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"107b54943e6df7dddcf5b6fea7987d980a2698ec","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.1.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.2":{"name":"log4js","version":"0.5.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"a3983716ab1960a1d6501e68588f2a25fe0f0e96","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.2.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.3":{"name":"log4js","version":"0.5.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.3","dist":{"shasum":"b1056671cc36507500d68f8b0aadb57694af037e","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.3.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.4":{"name":"log4js","version":"0.5.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.4","dist":{"shasum":"056f6f8c52ec7c42240002e1cf3c1808e8fd394b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.4.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.5":{"name":"log4js","version":"0.5.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.5","dist":{"shasum":"c598d663933d3ee8b2ce76c53b00bdd68fb7d68e","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.6":{"name":"log4js","version":"0.5.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.6","dist":{"shasum":"893bf7c9d1e4b10b2633ddd5a28f698b42e538fd","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.6.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.7":{"name":"log4js","version":"0.5.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.7","dist":{"shasum":"f6390ae46681eb350aa85d67f22c5968d39cc388","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.7.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.0":{"name":"log4js","version":"0.6.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.10"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.0","dist":{"shasum":"a0b15204de74e01fa8b5e95e6c1f6adf52737fe2","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.1":{"name":"log4js","version":"0.6.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.10"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.1","dist":{"shasum":"2e8deb171799662aadf0c97c8e6211a7b21e18c2","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.8":{"name":"log4js","version":"0.5.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.6||~0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.5.8","dist":{"shasum":"528892e28ad82a70b96364b19bae2dadb5eb9cea","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.8.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.2":{"name":"log4js","version":"0.6.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.10"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.2","dist":{"shasum":"59e232baeddd58aea0b4ddf7860ce2142615bac5","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.2.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.3":{"name":"log4js","version":"0.6.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.3","dist":{"shasum":"accb43d83de399560ad5567dbf830f9acec99c44","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.3.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.4":{"name":"log4js","version":"0.6.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.4","dist":{"shasum":"5c217945ed8ceb8845a82b5fdc193bf35f9460dd","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.5":{"name":"log4js","version":"0.6.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.5","dist":{"shasum":"55b88e2675d02da516f3351caaa1de8d9ea6ad73","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.6":{"name":"log4js","version":"0.6.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.6","dist":{"shasum":"6f7c3ad46323d8014183a2593a8119e2ddce5f2c","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.7":{"name":"log4js","version":"0.6.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.7","dist":{"shasum":"9a9eaa28ee056071c7a628e629dde2e57362bb6f","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.8":{"name":"log4js","version":"0.6.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"browser":{"os":false},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.8","dist":{"shasum":"86baebdcaf8ef989295d65a07773f7e32093d0b6","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jo
615 error registry error parsing json
616 silly registry.get cb [ 200,
616 silly registry.get   { vary: 'Accept',
616 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
616 silly registry.get     etag: '"203XJ9QIMDMK503FLE2EMJBD8"',
616 silly registry.get     date: 'Sat, 07 Sep 2013 01:29:12 GMT',
616 silly registry.get     'content-type': 'application/json',
616 silly registry.get     'content-length': '160409' } ]
617 silly lockFile f3becdd9-log4js-0-6-3 log4js@~0.6.3
618 silly lockFile f3becdd9-log4js-0-6-3 log4js@~0.6.3
619 verbose about to build /usr/local/lib/node_modules/karma
620 info /usr/local/lib/node_modules/karma unbuild
621 verbose from cache /usr/local/lib/node_modules/karma/package.json
622 info preuninstall karma@0.10.2
623 info uninstall karma@0.10.2
624 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild karma@0.10.2
625 verbose /usr/local/bin,[object Object] binRoot
626 info postuninstall karma@0.10.2
627 error SyntaxError: Unexpected end of input
627 error {"_id":"log4js","_rev":"86-a7db35238dfb9bdcc0c632e7d529f825","name":"log4js","description":"Port of Log4js to work with node.","dist-tags":{"latest":"0.6.8"},"versions":{"0.1.0":{"name":"log4js","version":"0.1.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"test.js"},"directories":{"test":"spec"},"_id":"log4js@0.1.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.1.0.tgz","shasum":"b975d7eb1f5e9956b7d98cc2512be8b128f481f9"}},"0.2.0":{"name":"log4js","version":"0.2.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.0.tgz","shasum":"0076f8aeafde7bb6bdc39539e7ef3958164472e9"}},"0.2.2":{"name":"log4js","version":"0.2.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"web":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.2.tgz","shasum":"fbf3d34b2179610ab608e9f0d3db64ce0bc05c72"}},"0.2.3":{"name":"log4js","version":"0.2.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.3","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.2.5","dist":{"shasum":"c6b49fb2815a444dd0ac8bc5f7da0cc1a5be8c53","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.3.tgz"}},"0.2.4":{"name":"log4js","version":"0.2.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/logging.js"},"directories":{"test":"test","lib":"lib"},"_id":"log4js@0.2.4","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.1","dist":{"shasum":"5b718ae1ae7dded99d1931cd932f7d2c45ee64cc","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.4.tgz"}},"0.2.5":{"name":"log4js","version":"0.2.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.2.5","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"498522ff1b81b20803e2777ad44f10a03bd3f4fb","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.5.tgz"}},"0.2.6":{"name":"log4js","version":"0.2.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.2.6","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"78f73445823bcbc2c7c7245d3dbe04e3b211ac9a","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.2.6.tgz"}},"0.3.0":{"name":"log4js","version":"0.3.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_id":"log4js@0.3.0","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.4.6","dist":{"shasum":"dbbe3c81babd72701b966897bdbb3689054b3901","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.0.tgz"}},"0.3.1":{"name":"log4js","version":"0.3.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"bd66ca1114f4cd452fa66dee1ddd265c5bf91b7b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.1.tgz"}},"0.3.2":{"name":"log4js","version":"0.3.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"d98b51e668b3e0cd476ca3e0c7a0d4bbe69a475b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.2.tgz"}},"0.3.3":{"name":"log4js","version":"0.3.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.3","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"f2a85b0208ae9cac940fa579bcb7d7001ca55b70","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.3.tgz"}},"0.3.4":{"name":"log4js","version":"0.3.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.4","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"7093a1fd1c1628d1c62e4b0681fbb4bb5422c648","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.4.tgz"}},"0.3.5":{"name":"log4js","version":"0.3.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.5","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"6cc991d3cac23ad523979da771c323b02b58c067","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.5.tgz"}},"0.3.6":{"name":"log4js","version":"0.3.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.6","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"c19558218cc2f41440e30c564ddea8e7842f651b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.6.tgz"}},"0.3.7":{"name":"log4js","version":"0.3.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.7/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.7","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"cbfefbbcc1dabae3de486d12d6dd25093fed40fc","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.7.tgz"}},"0.3.8":{"name":"log4js","version":"0.3.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.1.100"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.8/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.8","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"64a244857c811c7adc8ce0c88619671b91d8e9f1","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.8.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.3.9":{"name":"log4js","version":"0.3.9","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"devDependencies":{"vows":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/garethjones/.npm/log4js/0.3.9/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"log4js@0.3.9","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.5.0","_defaultsLoaded":true,"dist":{"shasum":"ac981d408f4a77b77627708268d3584f2bd38cf9","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.3.9.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.0":{"name":"log4js","version":"0.4.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.0","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"0145a12a704e8b7a48929be39f359954962ce9b6","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.0.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.1":{"name":"log4js","version":"0.4.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"bugs":{"url":"http://github.com/csausdev/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.1","_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"d1280b39d54bd28ac396f173b0a291516e289264","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.1.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.2":{"name":"log4js","version":"0.4.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","compress-buffer":">= 0.5.0"},"devDependencies":{"vows":">=0.5.2","sandboxed-module":">= 0.1.1","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.2","_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"a23ded0ab546b267b613f122595a215e2eff5b78","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.2.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\nNOTE: v0.3.8 of log4js is the last that will work with node versions older than 0.4. To use v0.3.9 you will need node 0.4 or later.\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code\nand tidied up some of the javascript. It includes a basic file logger, with log rolling based on file size, and also replaces node's console.log functions.\n\nNOTE: in v0.2.x require('log4js') returned a function, and you needed to call that function in your code before you could use it. This was to make testing easier. v0.3.x make use of [felixge's sandbox-module](https://github.com/felixge/node-sandboxed-module), so we don't need to return a function.\n\n## installation\n\nnpm install log4js\n\n## tests\n\nTests now use [vows](http://vowsjs.org), run with `vows test/*.js`.\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); //note the need to call the function\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n\n\n## configuration\n\nYou can either configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`) explicitly, or just let log4js look for a file called `log4js.json` (it looks in the current directory first, then the require paths, and finally looks for the default config included in the same directory as the `log4js.js` file).\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels\nto occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure(undefined, {}); // load 'log4js.json' from NODE_PATH\n\nOr:\n\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure(undefined, { reloadSecs: 300 }); // load 'log4js.json' from NODE_PATH\n\nYou can also pass an object to the configure function, which has the same properties as the json versions.\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n\n## connect/express logger\n\nA connect/express logger has been added to log4js, by [danbell](https://github.com/danbell). This allows connect/express servers to log using log4js. See example-connect-logger.js.\n\n    var log4js = require('./lib/log4js');\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n\n    logger.setLevel('INFO');\n\n    var app = require('express').createServer();\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO }));\n    });\n    app.get('/', function(req,res) {\n        res.send('hello world');\n    });\n    app.listen(5000);\n\nThe options object that is passed to log4js.connectLogger supports a format string the same as the connect/express logger. For example:\n\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO, format: ':method :url' }));\n    });\n\n## hook.io logger\n\nA [hook.io](https://github.com/hookio) logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"master\",\n          \"debug\": false,\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"worker\",\n          \"debug\": false\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var hookCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (hookCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    hookCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\nlog4js-master/worker.json hookio appender parameters will be passed into the Hook constructor directly, so you can specify hook-port, hook-host etc.\n*NOTE* hook.io appender will currently (and probably indefinitely) explode if you enable hook.io debug because of the way log4js overrides console.log\n\n## multiprocess (tcp socket) logger\n\nA multiprocess logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    # Will listen for connections on port and host\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"master\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\",\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    # Will connect to master (tcp server) and send stringified log events\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"worker\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\"\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var immaCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (immaCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    immaCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\n\n## gelf logger\n\nA gelf logger has been added to log4js, by [arifamirani](https://github.com/arifamirani). This allows log4js to log to [GELF](http://www.graylog2.org/about/gelf) compatible servers such as [Graylog](http://www.graylog2.org/). This is currently configuration based and needs the following configuration to be added to log4j.json. For example:\n\n<pre>\n  {\n    \"appenders\": [  \n      {\n        \"type\": \"gelf\",\n        \"host\": \"logs.mydomain.com\", //defaults to localhost\n        \"hostname\":\"mrs-dev\", //defaults to the value returned by os.hostname()\n        \"port\": \"12201\", //defaults to 12201\n        \"facility\": \"myapp\" //defaults to nodejs-server\n      }\n    }\n  }\n</pre>\n\n## author (of this node version)\n\nGareth Jones (csausdev - gareth.jones@sensis.com.au)\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.4.3":{"name":"log4js","version":"0.4.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.4"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","compress-buffer":"0.5.1"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.7.7","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.4.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"f463dc052a672b90d07bbc43120d7dcc6f8a6264","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.4.3.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\nNOTE: v0.3.8 of log4js is the last that will work with node versions older than 0.4. To use v0.3.9 you will need node 0.4 or later.\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code\nand tidied up some of the javascript. It includes a basic file logger, with log rolling based on file size, and also replaces node's console.log functions.\n\nNOTE: in v0.2.x require('log4js') returned a function, and you needed to call that function in your code before you could use it. This was to make testing easier. v0.3.x make use of [felixge's sandbox-module](https://github.com/felixge/node-sandboxed-module), so we don't need to return a function.\n\n## installation\n\nnpm install log4js\n\n## tests\n\nTests now use [vows](http://vowsjs.org), run with `vows test/*.js`.\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); //note the need to call the function\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n\n\n## configuration\n\nYou can either configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`) explicitly, or just let log4js look for a file called `log4js.json` (it looks in the current directory first, then the require paths, and finally looks for the default config included in the same directory as the `log4js.js` file).\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels\nto occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure(undefined, {}); // load 'log4js.json' from NODE_PATH\n\nOr:\n\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure(undefined, { reloadSecs: 300 }); // load 'log4js.json' from NODE_PATH\n\nYou can also pass an object to the configure function, which has the same properties as the json versions.\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n\n## connect/express logger\n\nA connect/express logger has been added to log4js, by [danbell](https://github.com/danbell). This allows connect/express servers to log using log4js. See example-connect-logger.js.\n\n    var log4js = require('./lib/log4js');\n    log4js.addAppender(log4js.consoleAppender());\n    log4js.addAppender(log4js.fileAppender('cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n\n    logger.setLevel('INFO');\n\n    var app = require('express').createServer();\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO }));\n    });\n    app.get('/', function(req,res) {\n        res.send('hello world');\n    });\n    app.listen(5000);\n\nThe options object that is passed to log4js.connectLogger supports a format string the same as the connect/express logger. For example:\n\n    app.configure(function() {\n        app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO, format: ':method :url' }));\n    });\n\n## hook.io logger\n\nA [hook.io](https://github.com/hookio) logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"master\",\n          \"debug\": false,\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"hookio\",\n          \"name\": \"hookio-logger\",\n          \"mode\": \"worker\",\n          \"debug\": false\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var hookCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (hookCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    hookCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\nlog4js-master/worker.json hookio appender parameters will be passed into the Hook constructor directly, so you can specify hook-port, hook-host etc.\n*NOTE* hook.io appender will currently (and probably indefinitely) explode if you enable hook.io debug because of the way log4js overrides console.log\n\n## multiprocess (tcp socket) logger\n\nA multiprocess logger has been added to log4js by [dbrain](https://github.com/dbrain). This allows multiple worker processes to log through a single master process, avoiding issues with rolling etc. in a clustered environment.\nThis was mainly created for [cluster](https://github.com/LearnBoost/cluster), but you can adapt the example to match your needs, you know, if it fits them.\n<pre>\n    #### log4js-master.json ####\n    # Will listen for connections on port and host\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"master\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\",\n          \"appender\": {\n            \"type\": \"file\",\n            \"filename\": \"muffin.log\",\n            \"maxLogSize\": 104857600,\n            \"backups\": 10,\n            \"pollInterval\": 15\n          }\n        }\n      }]\n    }\n\n    #### log4js-worker.json ####\n    # Will connect to master (tcp server) and send stringified log events\n    {\n      \"appenders\": [{\n        \"type\": \"logLevelFilter\",\n        \"level\": \"DEBUG\",\n        \"appender\": {\n          \"type\": \"multiprocess\",\n          \"mode\": \"worker\",\n          \"loggerPort\": 5001,\n          \"loggerHost\": \"simonsaysdie\"\n        }\n      }]\n    }\n\n    #### ilikebeans.js ####\n    var cluster = require('cluster');\n    var immaCluster = cluster('./doyoulikebeans');\n\n    // Perform the once off configuration depending on type of cluster\n    if (immaCluster.isMaster) {\n      require('log4js').configure('log4js-master.json');\n    } else {\n      require('log4js').configure('log4js-worker.json');\n    }\n\n    // Standard cluster startup\n    immaCluster\n      .use(cluster.logger('run/logs'))\n      .use(cluster.pidfiles('run/pids'))\n      .listen(3000);\n</pre>\n\n## gelf logger\n\nA gelf logger has been added to log4js, by [arifamirani](https://github.com/arifamirani). This allows log4js to log to [GELF](http://www.graylog2.org/about/gelf) compatible servers such as [Graylog](http://www.graylog2.org/). This is currently configuration based and needs the following configuration to be added to log4j.json. For example:\n\n<pre>\n  {\n    \"appenders\": [  \n      {\n        \"type\": \"gelf\",\n        \"host\": \"logs.mydomain.com\", //defaults to localhost\n        \"hostname\":\"mrs-dev\", //defaults to the value returned by os.hostname()\n        \"port\": \"12201\", //defaults to 12201\n        \"facility\": \"myapp\" //defaults to nodejs-server\n      }\n    }\n  }\n</pre>\n\n## author (of this node version)\n\nGareth Jones (csausdev - gareth.jones@sensis.com.au)\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.0":{"name":"log4js","version":"0.5.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"ad4233abfc3ee6670dabb622d42f00e318af41d0","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.0.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js:\n\n    var log4js = require('log4js'); \n    log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](wiki). Improve the [wiki](wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.1":{"name":"log4js","version":"0.5.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows test/*.js"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"107b54943e6df7dddcf5b6fea7987d980a2698ec","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.1.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.2":{"name":"log4js","version":"0.5.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"git://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"_id":"log4js@0.5.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"a3983716ab1960a1d6501e68588f2a25fe0f0e96","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.2.tgz"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"pollInterval\": 15,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"pollInterval\": 15,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.3":{"name":"log4js","version":"0.5.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n\t    appenders: [\n\t\t    { type: 'console' },\n\t\t    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n\t    ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object.\nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.3","dist":{"shasum":"b1056671cc36507500d68f8b0aadb57694af037e","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.3.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.4":{"name":"log4js","version":"0.5.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.4","dist":{"shasum":"056f6f8c52ec7c42240002e1cf3c1808e8fd394b","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.4.tgz"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.5":{"name":"log4js","version":"0.5.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.5","dist":{"shasum":"c598d663933d3ee8b2ce76c53b00bdd68fb7d68e","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.6":{"name":"log4js","version":"0.5.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n    appenders: [\n        { type: \"console\" }\n    ],\n    replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n\n           var log4js = require('log4js');\n           var logger = log4js.getLogger();\n           logger.debug(\"Some debug messages\");\n\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n\n    [2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n\n    var log4js = require('log4js'); \n    //console log is loaded by default, so you won't normally need to do this\n    //log4js.loadAppender('console');\n    log4js.loadAppender('file');\n    //log4js.addAppender(log4js.appenders.console());\n    log4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\n    var logger = log4js.getLogger('cheese');\n    logger.setLevel('ERROR');\n\n    logger.trace('Entering cheese testing');\n    logger.debug('Got cheese.');\n    logger.info('Cheese is Gouda.');\n    logger.warn('Cheese is quite smelly.');\n    logger.error('Cheese is too ripe!');\n    logger.fatal('Cheese was breeding ground for listeria.');\n\nOutput:\n\n    [2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n    [2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n    \nThe first 5 lines of the code above could also be written as:\n\n    var log4js = require('log4js');\n    log4js.configure({\n            appenders: [\n                    { type: 'console' },\n                    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n            ]\n    });\n    \n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n    var log4js = require('log4js');\n    log4js.configure('my_log4js_configuration.json', {});\n\nTo specify a different period:\n\n    log4js.configure('file.json', { reloadSecs: 300 });\n\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n    log4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n\n    #### my_log4js_configuration.json ####\n    {\n      \"appenders\": [\n        {\n          \"type\": \"file\",\n          \"filename\": \"relative/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 3,\n          \"category\": \"relative-logger\"\n        },\n        {\n          \"type\": \"file\",\n          \"absolute\": true,\n          \"filename\": \"/absolute/path/to/log_file.log\",\n          \"maxLogSize\": 20480,\n          \"backups\": 10,\n          \"category\": \"absolute-logger\"          \n        }\n      ]\n    }\n    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.6","dist":{"shasum":"893bf7c9d1e4b10b2633ddd5a28f698b42e538fd","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.6.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.7":{"name":"log4js","version":"0.5.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.6"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","_id":"log4js@0.5.7","dist":{"shasum":"f6390ae46681eb350aa85d67f22c5968d39cc388","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.7.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.0":{"name":"log4js","version":"0.6.0","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":["node >=0.10"],"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.0","dist":{"shasum":"a0b15204de74e01fa8b5e95e6c1f6adf52737fe2","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.1":{"name":"log4js","version":"0.6.1","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.10"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.1","dist":{"shasum":"2e8deb171799662aadf0c97c8e6211a7b21e18c2","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.5.8":{"name":"log4js","version":"0.5.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.6||~0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.6.2","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](log4js-node/wiki). Improve the [wiki](log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.5.8","dist":{"shasum":"528892e28ad82a70b96364b19bae2dadb5eb9cea","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.5.8.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.2":{"name":"log4js","version":"0.6.2","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":"~0.10"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.2","dist":{"shasum":"59e232baeddd58aea0b4ddf7860ce2142615bac5","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.2.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.3":{"name":"log4js","version":"0.6.3","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: version 0.6.0 onwards will only work with node v0.10.x upwards, since it makes use of the new streams API. If you're using node 0.8 or lower, use log4js@0.5.7.\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.3","dist":{"shasum":"accb43d83de399560ad5567dbf830f9acec99c44","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.3.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.4":{"name":"log4js","version":"0.6.4","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.4","dist":{"shasum":"5c217945ed8ceb8845a82b5fdc193bf35f9460dd","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.5":{"name":"log4js","version":"0.6.5","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.5","dist":{"shasum":"55b88e2675d02da516f3351caaa1de8d9ea6ad73","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.6":{"name":"log4js","version":"0.6.6","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.6","dist":{"shasum":"6f7c3ad46323d8014183a2593a8119e2ddce5f2c","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.7":{"name":"log4js","version":"0.6.7","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.7","dist":{"shasum":"9a9eaa28ee056071c7a628e629dde2e57362bb6f","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jones@sensis.com.au"},"maintainers":[{"name":"csausdev","email":"gareth.jones@sensis.com.au"}]},"0.6.8":{"name":"log4js","version":"0.6.8","description":"Port of Log4js to work with node.","keywords":["logging","log","log4j","node"],"main":"./lib/log4js","author":{"name":"Gareth Jones","email":"gareth.jones@sensis.com.au"},"repository":{"type":"git","url":"https://github.com/nomiddlename/log4js-node.git"},"bugs":{"url":"http://github.com/nomiddlename/log4js-node/issues"},"engines":{"node":">=0.8"},"scripts":{"test":"vows"},"directories":{"test":"test","lib":"lib"},"dependencies":{"async":"0.1.15","dequeue":"1.0.3","semver":"~1.1.4","readable-stream":"~1.0.2"},"devDependencies":{"vows":"0.7.0","sandboxed-module":"0.1.3","hook.io":"0.8.10","underscore":"1.2.1"},"browser":{"os":false},"readme":"# log4js-node [![Build Status](https://secure.travis-ci.org/nomiddlename/log4js-node.png?branch=master)](http://travis-ci.org/nomiddlename/log4js-node)\n\n\nThis is a conversion of the [log4js](http://log4js.berlios.de/index.html)\nframework to work with [node](http://nodejs.org). I've mainly stripped out the browser-specific code and tidied up some of the javascript. \n\nOut of the box it supports the following features:\n\n* coloured console logging\n* replacement of node's console.log functions (optional)\n* file appender, with log rolling based on file size\n* SMTP appender\n* GELF appender\n* hook.io appender\n* multiprocess appender (useful when you've got worker processes)\n* a logger for connect/express servers\n* configurable log message layout/patterns\n* different log levels for different log categories (make some parts of your app log as DEBUG, others only ERRORS, etc.)\n\nNOTE: from log4js 0.5 onwards you'll need to explicitly enable replacement of node's console.log functions. Do this either by calling `log4js.replaceConsole()` or configuring with an object or json file like this:\n\n```javascript\n{\n  appenders: [\n    { type: \"console\" }\n  ],\n  replaceConsole: true\n}\n```\n\n## installation\n\nnpm install log4js\n\n\n## usage\n\nMinimalist version:\n```javascript\nvar log4js = require('log4js');\nvar logger = log4js.getLogger();\nlogger.debug(\"Some debug messages\");\n```\nBy default, log4js outputs to stdout with the coloured layout (thanks to [masylum](http://github.com/masylum)), so for the above you would see:\n```bash\n[2010-01-17 11:43:37.987] [DEBUG] [default] - Some debug messages\n```\nSee example.js for a full example, but here's a snippet (also in fromreadme.js):\n```javascript\nvar log4js = require('log4js'); \n//console log is loaded by default, so you won't normally need to do this\n//log4js.loadAppender('console');\nlog4js.loadAppender('file');\n//log4js.addAppender(log4js.appenders.console());\nlog4js.addAppender(log4js.appenders.file('logs/cheese.log'), 'cheese');\n\nvar logger = log4js.getLogger('cheese');\nlogger.setLevel('ERROR');\n\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.warn('Cheese is quite smelly.');\nlogger.error('Cheese is too ripe!');\nlogger.fatal('Cheese was breeding ground for listeria.');\n```\nOutput:\n```bash\n[2010-01-17 11:43:37.987] [ERROR] cheese - Cheese is too ripe!\n[2010-01-17 11:43:37.990] [FATAL] cheese - Cheese was breeding ground for listeria.\n```    \nThe first 5 lines of the code above could also be written as:\n```javascript\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [\n    { type: 'console' },\n    { type: 'file', filename: 'logs/cheese.log', category: 'cheese' }\n  ]\n});\n```\n\n## configuration\n\nYou can configure the appenders and log levels manually (as above), or provide a\nconfiguration file (`log4js.configure('path/to/file.json')`), or a configuration object. The \nconfiguration file location may also be specified via the environment variable \nLOG4JS_CONFIG (`export LOG4JS_CONFIG=path/to/file.json`). \nAn example file can be found in `test/log4js.json`. An example config file with log rolling is in `test/with-log-rolling.json`.\nBy default, the configuration file is checked for changes every 60 seconds, and if changed, reloaded. This allows changes to logging levels to occur without restarting the application.\n\nTo turn off configuration file change checking, configure with:\n\n```javascript\nvar log4js = require('log4js');\nlog4js.configure('my_log4js_configuration.json', {});\n```\nTo specify a different period:\n\n```javascript\nlog4js.configure('file.json', { reloadSecs: 300 });\n```\nFor FileAppender you can also pass the path to the log directory as an option where all your log files would be stored.\n\n```javascript\nlog4js.configure('my_log4js_configuration.json', { cwd: '/absolute/path/to/log/dir' });\n```\nIf you have already defined an absolute path for one of the FileAppenders in the configuration file, you could add a \"absolute\": true to the particular FileAppender to override the cwd option passed. Here is an example configuration file:\n```json\n#### my_log4js_configuration.json ####\n{\n  \"appenders\": [\n    {\n      \"type\": \"file\",\n      \"filename\": \"relative/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 3,\n      \"category\": \"relative-logger\"\n    },\n    {\n      \"type\": \"file\",\n      \"absolute\": true,\n      \"filename\": \"/absolute/path/to/log_file.log\",\n      \"maxLogSize\": 20480,\n      \"backups\": 10,\n      \"category\": \"absolute-logger\"          \n    }\n  ]\n}\n```    \nDocumentation for most of the core appenders can be found on the [wiki](https://github.com/nomiddlename/log4js-node/wiki/Appenders), otherwise take a look at the tests and the examples.\n\n## Documentation\nSee the [wiki](https://github.com/nomiddlename/log4js-node/wiki). Improve the [wiki](https://github.com/nomiddlename/log4js-node/wiki), please.\n\n## Contributing\nContributions welcome, but take a look at the [rules](https://github.com/nomiddlename/log4js-node/wiki/Contributing) first.\n\n## License\n\nThe original log4js was distributed under the Apache 2.0 License, and so is this. I've tried to\nkeep the original copyright and author credits in place, except in sections that I have rewritten\nextensively.\n","readmeFilename":"README.md","_id":"log4js@0.6.8","dist":{"shasum":"86baebdcaf8ef989295d65a07773f7e32093d0b6","tarball":"http://registry.npmjs.org/log4js/-/log4js-0.6.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"csausdev","email":"gareth.jo
627 error     at Object.parse (native)
627 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:235:23)
627 error     at Request.init.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/main.js:120:22)
627 error     at Request.EventEmitter.emit (events.js:99:17)
627 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/main.js:648:16)
627 error     at Request.EventEmitter.emit (events.js:126:20)
627 error     at IncomingMessage.Request.start.self.req.self.httpModule.request.buffer (/usr/local/lib/node_modules/npm/node_modules/request/main.js:610:14)
627 error     at IncomingMessage.EventEmitter.emit (events.js:126:20)
627 error     at IncomingMessage._emitEnd (http.js:366:10)
627 error     at http.js:1416:11
628 error If you need help, you may report this log at:
628 error     <http://github.com/isaacs/npm/issues>
628 error or email it to:
628 error     <npm-@googlegroups.com>
629 error System Darwin 12.4.0
630 error command "node" "/usr/local/bin/npm" "install" "-g" "karma"
631 error cwd /Users/ckgagan/dev/angular_apps/phone_app
632 error node -v v0.8.22
633 error npm -v 1.2.14
634 error type unexpected_eos
635 verbose exit [ 1, true ]
